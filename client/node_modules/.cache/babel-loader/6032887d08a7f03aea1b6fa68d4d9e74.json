{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar DefaultLinePrependor,\n    SpecialString,\n    tools,\n    extend = function extend(child, parent) {\n  for (var key in parent) {\n    if (hasProp.call(parent, key)) child[key] = parent[key];\n  }\n\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n  return child;\n},\n    hasProp = {}.hasOwnProperty;\n\ntools = require('../../../tools');\nSpecialString = require('../../SpecialString');\n\nmodule.exports = DefaultLinePrependor = function (superClass) {\n  var self;\n  extend(DefaultLinePrependor, superClass);\n\n  function DefaultLinePrependor() {\n    return DefaultLinePrependor.__super__.constructor.apply(this, arguments);\n  }\n\n  self = DefaultLinePrependor;\n\n  DefaultLinePrependor.pad = function (howMuch) {\n    return tools.repeatString(\" \", howMuch);\n  };\n\n  DefaultLinePrependor.prototype._render = function (inherited, options) {\n    var addToLeft, addToRight, alignment, bullet, char, charLen, diff, left, output, space, toWrite;\n\n    if (this._lineNo === 0 && (bullet = this._config.bullet)) {\n      char = bullet.char;\n      charLen = SpecialString(char).length;\n      alignment = bullet.alignment;\n      space = this._config.amount;\n      toWrite = char;\n      addToLeft = '';\n      addToRight = '';\n\n      if (space > charLen) {\n        diff = space - charLen;\n\n        if (alignment === 'right') {\n          addToLeft = self.pad(diff);\n        } else if (alignment === 'left') {\n          addToRight = self.pad(diff);\n        } else if (alignment === 'center') {\n          left = Math.round(diff / 2);\n          addToLeft = self.pad(left);\n          addToRight = self.pad(diff - left);\n        } else {\n          throw Error(\"Unknown alignment `\" + alignment + \"`\");\n        }\n      }\n\n      output = addToLeft + char + addToRight;\n    } else {\n      output = self.pad(this._config.amount);\n    }\n\n    return inherited + output;\n  };\n\n  return DefaultLinePrependor;\n}(require('./_LinePrependor'));","map":null,"metadata":{},"sourceType":"script"}