{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport find from 'lodash/find';\nimport getAst from './getAst'; // Strip semicolon (;) at the end\n\nvar unsemicolon = function unsemicolon(s) {\n  return s.replace(/;\\s*$/, '');\n};\n/**\n * Take source code and returns:\n * 1. Code before the last top-level expression.\n * 2. Code with the last top-level expression wrapped in a return statement\n *    (kind of an implicit return).\n *\n * Example:\n * var a = 1; React.createElement('i', null, a); // =>\n * 1. var a = 1\n * 2. var a = 1; return (React.createElement('i', null, a));\n */\n\n\nexport default function splitExampleCode(code) {\n  var ast = getAst(code);\n\n  if (!ast) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var firstExpression = find(ast.body.reverse(), {\n    type: 'ExpressionStatement'\n  });\n\n  if (!firstExpression) {\n    return {\n      head: '',\n      example: code\n    };\n  }\n\n  var start = firstExpression.start,\n      end = firstExpression.end;\n  var head = unsemicolon(code.substring(0, start));\n  var firstExpressionCode = unsemicolon(code.substring(start, end));\n  var example = head + \";\\nreturn (\" + firstExpressionCode + \");\";\n  return {\n    head: head,\n    example: example\n  };\n}","map":null,"metadata":{},"sourceType":"module"}