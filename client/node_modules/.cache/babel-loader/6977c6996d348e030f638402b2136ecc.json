{"ast":null,"code":"import \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.string.small\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Styled from 'rsg-components/Styled';\nimport cx from 'clsx';\nexport var styles = function styles(_ref) {\n  var fontFamily = _ref.fontFamily,\n      fontSize = _ref.fontSize,\n      color = _ref.color;\n  return {\n    text: {\n      fontFamily: fontFamily.base\n    },\n    inheritSize: {\n      fontSize: 'inherit'\n    },\n    smallSize: {\n      fontSize: fontSize.small\n    },\n    baseSize: {\n      fontSize: fontSize.base\n    },\n    textSize: {\n      fontSize: fontSize.text\n    },\n    baseColor: {\n      color: color.base\n    },\n    lightColor: {\n      color: color.light\n    },\n    em: {\n      fontStyle: 'italic'\n    },\n    strong: {\n      fontWeight: 'bold'\n    },\n    isUnderlined: {\n      borderBottom: [[1, 'dotted', color.lightest]]\n    }\n  };\n};\nexport function TextRenderer(_ref2) {\n  var _cx;\n\n  var classes = _ref2.classes,\n      semantic = _ref2.semantic,\n      size = _ref2.size,\n      color = _ref2.color,\n      underlined = _ref2.underlined,\n      children = _ref2.children,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"classes\", \"semantic\", \"size\", \"color\", \"underlined\", \"children\"]);\n\n  var Tag = semantic || 'span';\n  var classNames = cx(classes.text, classes[size + \"Size\"], classes[color + \"Color\"], (_cx = {}, _cx[classes[semantic]] = semantic, _cx[classes.isUnderlined] = underlined, _cx));\n  return React.createElement(Tag, _extends({}, props, {\n    className: classNames\n  }), children);\n}\nTextRenderer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  semantic: PropTypes.oneOf(['em', 'strong']),\n  size: PropTypes.oneOf(['inherit', 'small', 'base', 'text']),\n  color: PropTypes.oneOf(['base', 'light']),\n  underlined: PropTypes.bool,\n  children: PropTypes.node.isRequired\n};\nTextRenderer.defaultProps = {\n  size: 'inherit',\n  color: 'base',\n  underlined: false\n};\nexport default Styled(styles)(TextRenderer);","map":null,"metadata":{},"sourceType":"module"}