{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\nvar array;\nmodule.exports = array = {\n  /*\n  \tTries to turn anything into an array.\n  */\n  from: function from(r) {\n    return Array.prototype.slice.call(r);\n  },\n\n  /*\n  \tClone of an array. Properties will be shallow copies.\n  */\n  simpleClone: function simpleClone(a) {\n    return a.slice(0);\n  },\n  shallowEqual: function shallowEqual(a1, a2) {\n    var i, val, _i, _len;\n\n    if (!(Array.isArray(a1) && Array.isArray(a2) && a1.length === a2.length)) {\n      return false;\n    }\n\n    for (i = _i = 0, _len = a1.length; _i < _len; i = ++_i) {\n      val = a1[i];\n\n      if (a2[i] !== val) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  pluck: function pluck(a, i) {\n    var index, value, _i, _len;\n\n    if (a.length < 1) {\n      return a;\n    }\n\n    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {\n      value = a[index];\n\n      if (index > i) {\n        a[index - 1] = a[index];\n      }\n    }\n\n    a.length = a.length - 1;\n    return a;\n  },\n  pluckItem: function pluckItem(a, item) {\n    var index, removed, value, _i, _len;\n\n    if (a.length < 1) {\n      return a;\n    }\n\n    removed = 0;\n\n    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {\n      value = a[index];\n\n      if (value === item) {\n        removed++;\n        continue;\n      }\n\n      if (removed !== 0) {\n        a[index - removed] = a[index];\n      }\n    }\n\n    if (removed > 0) {\n      a.length = a.length - removed;\n    }\n\n    return a;\n  },\n  pluckOneItem: function pluckOneItem(a, item) {\n    var index, reached, value, _i, _len;\n\n    if (a.length < 1) {\n      return a;\n    }\n\n    reached = false;\n\n    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {\n      value = a[index];\n\n      if (!reached) {\n        if (value === item) {\n          reached = true;\n          continue;\n        }\n      } else {\n        a[index - 1] = a[index];\n      }\n    }\n\n    if (reached) {\n      a.length = a.length - 1;\n    }\n\n    return a;\n  },\n  pluckByCallback: function pluckByCallback(a, cb) {\n    var index, removed, value, _i, _len;\n\n    if (a.length < 1) {\n      return a;\n    }\n\n    removed = 0;\n\n    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {\n      value = a[index];\n\n      if (cb(value, index)) {\n        removed++;\n        continue;\n      }\n\n      if (removed !== 0) {\n        a[index - removed] = a[index];\n      }\n    }\n\n    if (removed > 0) {\n      a.length = a.length - removed;\n    }\n\n    return a;\n  },\n  pluckMultiple: function pluckMultiple(array, indexesToRemove) {\n    var i, removedSoFar, _i, _len;\n\n    if (array.length < 1) {\n      return array;\n    }\n\n    removedSoFar = 0;\n    indexesToRemove.sort();\n\n    for (_i = 0, _len = indexesToRemove.length; _i < _len; _i++) {\n      i = indexesToRemove[_i];\n      this.pluck(array, i - removedSoFar);\n      removedSoFar++;\n    }\n\n    return array;\n  },\n  injectByCallback: function injectByCallback(a, toInject, shouldInject) {\n    var i, len, val, valA, valB, _i, _len;\n\n    valA = null;\n    valB = null;\n    len = a.length;\n\n    if (len < 1) {\n      a.push(toInject);\n      return a;\n    }\n\n    for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {\n      val = a[i];\n      valA = valB;\n      valB = val;\n\n      if (shouldInject(valA, valB, toInject)) {\n        return a.splice(i, 0, toInject);\n      }\n    }\n\n    a.push(toInject);\n    return a;\n  },\n  injectInIndex: function injectInIndex(a, index, toInject) {\n    var i, len, toPut, toPutNext;\n    len = a.length;\n    i = index;\n\n    if (len < 1) {\n      a.push(toInject);\n      return a;\n    }\n\n    toPut = toInject;\n    toPutNext = null;\n\n    for (; i <= len; i++) {\n      toPutNext = a[i];\n      a[i] = toPut;\n      toPut = toPutNext;\n    }\n\n    ;\n    return null;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}