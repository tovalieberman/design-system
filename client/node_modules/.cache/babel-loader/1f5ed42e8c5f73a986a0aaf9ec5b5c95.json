{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\nvar Emitter, array;\narray = require('./array');\n\nmodule.exports = Emitter = function () {\n  function Emitter() {\n    this._listeners = {};\n    this._listenersForAnyEvent = [];\n    this._disabledEmitters = {};\n  }\n\n  Emitter.prototype.on = function (eventName, listener) {\n    if (this._listeners[eventName] == null) {\n      this._listeners[eventName] = [];\n    }\n\n    this._listeners[eventName].push(listener);\n\n    return this;\n  };\n\n  Emitter.prototype.once = function (eventName, listener) {\n    var _cb,\n        ran,\n        _this = this;\n\n    ran = false;\n\n    _cb = function cb() {\n      if (ran) {\n        return;\n      }\n\n      ran = true;\n      listener();\n      return setTimeout(function () {\n        return _this.removeEvent(eventName, _cb);\n      }, 0);\n    };\n\n    this.on(eventName, _cb);\n    return this;\n  };\n\n  Emitter.prototype.onAnyEvent = function (listener) {\n    this._listenersForAnyEvent.push(listener);\n\n    return this;\n  };\n\n  Emitter.prototype.removeEvent = function (eventName, listener) {\n    if (this._listeners[eventName] == null) {\n      return this;\n    }\n\n    array.pluckOneItem(this._listeners[eventName], listener);\n    return this;\n  };\n\n  Emitter.prototype.removeListeners = function (eventName) {\n    if (this._listeners[eventName] == null) {\n      return this;\n    }\n\n    this._listeners[eventName].length = 0;\n    return this;\n  };\n\n  Emitter.prototype.removeAllListeners = function () {\n    var listeners, name, _ref;\n\n    _ref = this._listeners;\n\n    for (name in _ref) {\n      listeners = _ref[name];\n      listeners.length = 0;\n    }\n\n    return this;\n  };\n\n  Emitter.prototype._emit = function (eventName, data) {\n    var listener, _i, _j, _len, _len1, _ref, _ref1;\n\n    _ref = this._listenersForAnyEvent;\n\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      listener = _ref[_i];\n      listener.call(this, data, eventName);\n    }\n\n    if (this._listeners[eventName] == null) {\n      return;\n    }\n\n    _ref1 = this._listeners[eventName];\n\n    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n      listener = _ref1[_j];\n      listener.call(this, data);\n    }\n  };\n\n  Emitter.prototype._throttleEmitterMethod = function (fnName, time) {\n    var lastCallArgs,\n        originalFn,\n        pend,\n        pending,\n        runIt,\n        timer,\n        _this = this;\n\n    if (time == null) {\n      time = 1000;\n    }\n\n    originalFn = this[fnName];\n\n    if (typeof originalFn !== 'function') {\n      throw Error(\"this class does not have a method called '\" + fnName + \"'\");\n    }\n\n    lastCallArgs = null;\n    pending = false;\n    timer = null;\n\n    this[fnName] = function () {\n      lastCallArgs = arguments;\n      return pend();\n    };\n\n    pend = function pend() {\n      if (pending) {\n        clearTimeout(timer);\n      }\n\n      timer = setTimeout(runIt, time);\n      return pending = true;\n    };\n\n    return runIt = function runIt() {\n      pending = false;\n      return originalFn.apply(_this, lastCallArgs);\n    };\n  };\n\n  Emitter.prototype._disableEmitter = function (fnName) {\n    if (this._disabledEmitters[fnName] != null) {\n      throw Error(\"\" + fnName + \" is already a disabled emitter\");\n    }\n\n    this._disabledEmitters[fnName] = this[fnName];\n    return this[fnName] = function () {};\n  };\n\n  Emitter.prototype._enableEmitter = function (fnName) {\n    var fn;\n    fn = this._disabledEmitters[fnName];\n\n    if (fn == null) {\n      throw Error(\"\" + fnName + \" is not a disabled emitter\");\n    }\n\n    this[fnName] = fn;\n    return delete this._disabledEmitters[fnName];\n  };\n\n  return Emitter;\n}();","map":null,"metadata":{},"sourceType":"script"}