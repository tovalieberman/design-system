{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.keys\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Styled from 'rsg-components/Styled';\nimport Markdown from 'rsg-components/Markdown';\nimport Name from 'rsg-components/Name';\nimport Type from 'rsg-components/Type';\nimport Group from 'react-group';\nexport var styles = function styles(_ref) {\n  var space = _ref.space;\n  return {\n    block: {\n      marginBottom: space[2]\n    }\n  };\n};\nexport function ArgumentRenderer(_ref2) {\n  var classes = _ref2.classes,\n      name = _ref2.name,\n      type = _ref2.type,\n      description = _ref2.description,\n      returns = _ref2.returns,\n      block = _ref2.block,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"classes\", \"name\", \"type\", \"description\", \"returns\", \"block\"]);\n\n  var isOptional = type && type.type === 'OptionalType';\n  var defaultValue = props.default;\n\n  if (isOptional) {\n    type = type.expression;\n  }\n\n  var content = React.createElement(Group, null, returns && 'Returns', name && React.createElement(\"span\", null, React.createElement(Name, null, name), type && ':'), type && React.createElement(Type, null, type.name, isOptional && '?', !!defaultValue && \"=\" + defaultValue), type && description && \"\\u2014\", description && React.createElement(Markdown, {\n    text: \"\" + description,\n    inline: true\n  }));\n\n  if (block) {\n    return React.createElement(\"div\", {\n      className: classes.block\n    }, content);\n  }\n\n  return content;\n}\nArgumentRenderer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  name: PropTypes.string,\n  type: PropTypes.object,\n  default: PropTypes.string,\n  description: PropTypes.string,\n  returns: PropTypes.bool,\n  block: PropTypes.bool\n};\nexport default Styled(styles)(ArgumentRenderer);","map":null,"metadata":{},"sourceType":"module"}