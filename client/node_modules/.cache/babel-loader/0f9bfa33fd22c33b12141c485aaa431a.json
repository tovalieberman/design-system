{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/tliebe1/Code/design-system/glic-design-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tliebe1/Code/design-system/glic-design-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/tliebe1/Code/design-system/glic-design-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/tliebe1/Code/design-system/glic-design-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/tliebe1/Code/design-system/glic-design-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/tliebe1/Code/design-system/glic-design-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar XHTMLEntities = require('./xhtml');\n\nvar hexNumber = /^[\\da-fA-F]+$/;\nvar decimalNumber = /^\\d+$/; // The map to `acorn-jsx` tokens from `acorn` namespace objects.\n\nvar acornJsxMap = new WeakMap(); // Get the original tokens for the given `acorn` namespace object.\n\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  var acornJsx = acornJsxMap.get(acorn);\n\n  if (!acornJsx) {\n    var tt = acorn.tokTypes;\n    var TokContext = acorn.TokContext;\n    var TokenType = acorn.TokenType;\n    var tc_oTag = new TokContext('<tag', false);\n    var tc_cTag = new TokContext('</tag', false);\n    var tc_expr = new TokContext('<tag>...</tag>', true, true);\n    var tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    var tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {\n        beforeExpr: true\n      }),\n      jsxTagStart: new TokenType('jsxTagStart'),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function () {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n\n      this.context.push(tc_oTag); // start opening tag context\n\n      this.exprAllowed = false;\n    };\n\n    tokTypes.jsxTagEnd.updateContext = function (prevType) {\n      var out = this.context.pop();\n\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = {\n      tokContexts: tokContexts,\n      tokTypes: tokTypes\n    };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n} // Transforms JSX element name to string.\n\n\nfunction getQualifiedJSXName(object) {\n  if (!object) return object;\n  if (object.type === 'JSXIdentifier') return object.name;\n  if (object.type === 'JSXNamespacedName') return object.namespace.name + ':' + object.name.name;\n  if (object.type === 'JSXMemberExpression') return getQualifiedJSXName(object.object) + '.' + getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function (options) {\n  options = options || {};\n  return function (Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n}; // This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\n\n\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  var acorn = Parser.acorn || require(\"acorn\");\n\n  var acornJsx = getJsxTokens(acorn);\n  var tt = acorn.tokTypes;\n  var tok = acornJsx.tokTypes;\n  var tokContexts = acorn.tokContexts;\n  var tc_oTag = acornJsx.tokContexts.tc_oTag;\n  var tc_cTag = acornJsx.tokContexts.tc_cTag;\n  var tc_expr = acornJsx.tokContexts.tc_expr;\n  var isNewLine = acorn.isNewLine;\n  var isIdentifierStart = acorn.isIdentifierStart;\n  var isIdentifierChar = acorn.isIdentifierChar;\n  return (\n    /*#__PURE__*/\n    function (_Parser) {\n      _inherits(_class, _Parser);\n\n      function _class() {\n        _classCallCheck(this, _class);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n      }\n\n      _createClass(_class, [{\n        key: \"jsx_readToken\",\n        // Reads inline JSX contents token.\n        value: function jsx_readToken() {\n          var out = '',\n              chunkStart = this.pos;\n\n          for (;;) {\n            if (this.pos >= this.input.length) this.raise(this.start, 'Unterminated JSX contents');\n            var ch = this.input.charCodeAt(this.pos);\n\n            switch (ch) {\n              case 60: // '<'\n\n              case 123:\n                // '{'\n                if (this.pos === this.start) {\n                  if (ch === 60 && this.exprAllowed) {\n                    ++this.pos;\n                    return this.finishToken(tok.jsxTagStart);\n                  }\n\n                  return this.getTokenFromCode(ch);\n                }\n\n                out += this.input.slice(chunkStart, this.pos);\n                return this.finishToken(tok.jsxText, out);\n\n              case 38:\n                // '&'\n                out += this.input.slice(chunkStart, this.pos);\n                out += this.jsx_readEntity();\n                chunkStart = this.pos;\n                break;\n\n              default:\n                if (isNewLine(ch)) {\n                  out += this.input.slice(chunkStart, this.pos);\n                  out += this.jsx_readNewLine(true);\n                  chunkStart = this.pos;\n                } else {\n                  ++this.pos;\n                }\n\n            }\n          }\n        }\n      }, {\n        key: \"jsx_readNewLine\",\n        value: function jsx_readNewLine(normalizeCRLF) {\n          var ch = this.input.charCodeAt(this.pos);\n          var out;\n          ++this.pos;\n\n          if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n            ++this.pos;\n            out = normalizeCRLF ? '\\n' : '\\r\\n';\n          } else {\n            out = String.fromCharCode(ch);\n          }\n\n          if (this.options.locations) {\n            ++this.curLine;\n            this.lineStart = this.pos;\n          }\n\n          return out;\n        }\n      }, {\n        key: \"jsx_readString\",\n        value: function jsx_readString(quote) {\n          var out = '',\n              chunkStart = ++this.pos;\n\n          for (;;) {\n            if (this.pos >= this.input.length) this.raise(this.start, 'Unterminated string constant');\n            var ch = this.input.charCodeAt(this.pos);\n            if (ch === quote) break;\n\n            if (ch === 38) {\n              // '&'\n              out += this.input.slice(chunkStart, this.pos);\n              out += this.jsx_readEntity();\n              chunkStart = this.pos;\n            } else if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.pos);\n              out += this.jsx_readNewLine(false);\n              chunkStart = this.pos;\n            } else {\n              ++this.pos;\n            }\n          }\n\n          out += this.input.slice(chunkStart, this.pos++);\n          return this.finishToken(tt.string, out);\n        }\n      }, {\n        key: \"jsx_readEntity\",\n        value: function jsx_readEntity() {\n          var str = '',\n              count = 0,\n              entity;\n          var ch = this.input[this.pos];\n          if (ch !== '&') this.raise(this.pos, 'Entity must start with an ampersand');\n          var startPos = ++this.pos;\n\n          while (this.pos < this.input.length && count++ < 10) {\n            ch = this.input[this.pos++];\n\n            if (ch === ';') {\n              if (str[0] === '#') {\n                if (str[1] === 'x') {\n                  str = str.substr(2);\n                  if (hexNumber.test(str)) entity = String.fromCharCode(parseInt(str, 16));\n                } else {\n                  str = str.substr(1);\n                  if (decimalNumber.test(str)) entity = String.fromCharCode(parseInt(str, 10));\n                }\n              } else {\n                entity = XHTMLEntities[str];\n              }\n\n              break;\n            }\n\n            str += ch;\n          }\n\n          if (!entity) {\n            this.pos = startPos;\n            return '&';\n          }\n\n          return entity;\n        } // Read a JSX identifier (valid tag or attribute name).\n        //\n        // Optimized version since JSX identifiers can't contain\n        // escape characters and so can be read as single slice.\n        // Also assumes that first character was already checked\n        // by isIdentifierStart in readToken.\n\n      }, {\n        key: \"jsx_readWord\",\n        value: function jsx_readWord() {\n          var ch,\n              start = this.pos;\n\n          do {\n            ch = this.input.charCodeAt(++this.pos);\n          } while (isIdentifierChar(ch) || ch === 45); // '-'\n\n\n          return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n        } // Parse next token as JSX identifier\n\n      }, {\n        key: \"jsx_parseIdentifier\",\n        value: function jsx_parseIdentifier() {\n          var node = this.startNode();\n          if (this.type === tok.jsxName) node.name = this.value;else if (this.type.keyword) node.name = this.type.keyword;else this.unexpected();\n          this.next();\n          return this.finishNode(node, 'JSXIdentifier');\n        } // Parse namespaced identifier.\n\n      }, {\n        key: \"jsx_parseNamespacedName\",\n        value: function jsx_parseNamespacedName() {\n          var startPos = this.start,\n              startLoc = this.startLoc;\n          var name = this.jsx_parseIdentifier();\n          if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n          var node = this.startNodeAt(startPos, startLoc);\n          node.namespace = name;\n          node.name = this.jsx_parseIdentifier();\n          return this.finishNode(node, 'JSXNamespacedName');\n        } // Parses element name in any form - namespaced, member\n        // or single identifier.\n\n      }, {\n        key: \"jsx_parseElementName\",\n        value: function jsx_parseElementName() {\n          if (this.type === tok.jsxTagEnd) return '';\n          var startPos = this.start,\n              startLoc = this.startLoc;\n          var node = this.jsx_parseNamespacedName();\n\n          if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n            this.unexpected();\n          }\n\n          while (this.eat(tt.dot)) {\n            var newNode = this.startNodeAt(startPos, startLoc);\n            newNode.object = node;\n            newNode.property = this.jsx_parseIdentifier();\n            node = this.finishNode(newNode, 'JSXMemberExpression');\n          }\n\n          return node;\n        } // Parses any type of JSX attribute value.\n\n      }, {\n        key: \"jsx_parseAttributeValue\",\n        value: function jsx_parseAttributeValue() {\n          switch (this.type) {\n            case tt.braceL:\n              var node = this.jsx_parseExpressionContainer();\n              if (node.expression.type === 'JSXEmptyExpression') this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n              return node;\n\n            case tok.jsxTagStart:\n            case tt.string:\n              return this.parseExprAtom();\n\n            default:\n              this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n          }\n        } // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n        // and so it should start at the end of last read token (left brace) and finish\n        // at the beginning of the next one (right brace).\n\n      }, {\n        key: \"jsx_parseEmptyExpression\",\n        value: function jsx_parseEmptyExpression() {\n          var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n          return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n        } // Parses JSX expression enclosed into curly brackets.\n\n      }, {\n        key: \"jsx_parseExpressionContainer\",\n        value: function jsx_parseExpressionContainer() {\n          var node = this.startNode();\n          this.next();\n          node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();\n          this.expect(tt.braceR);\n          return this.finishNode(node, 'JSXExpressionContainer');\n        } // Parses following JSX attribute name-value pair.\n\n      }, {\n        key: \"jsx_parseAttribute\",\n        value: function jsx_parseAttribute() {\n          var node = this.startNode();\n\n          if (this.eat(tt.braceL)) {\n            this.expect(tt.ellipsis);\n            node.argument = this.parseMaybeAssign();\n            this.expect(tt.braceR);\n            return this.finishNode(node, 'JSXSpreadAttribute');\n          }\n\n          node.name = this.jsx_parseNamespacedName();\n          node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n          return this.finishNode(node, 'JSXAttribute');\n        } // Parses JSX opening tag starting after '<'.\n\n      }, {\n        key: \"jsx_parseOpeningElementAt\",\n        value: function jsx_parseOpeningElementAt(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.attributes = [];\n          var nodeName = this.jsx_parseElementName();\n          if (nodeName) node.name = nodeName;\n\n          while (this.type !== tt.slash && this.type !== tok.jsxTagEnd) {\n            node.attributes.push(this.jsx_parseAttribute());\n          }\n\n          node.selfClosing = this.eat(tt.slash);\n          this.expect(tok.jsxTagEnd);\n          return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n        } // Parses JSX closing tag starting after '</'.\n\n      }, {\n        key: \"jsx_parseClosingElementAt\",\n        value: function jsx_parseClosingElementAt(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n          var nodeName = this.jsx_parseElementName();\n          if (nodeName) node.name = nodeName;\n          this.expect(tok.jsxTagEnd);\n          return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n        } // Parses entire JSX element, including it's opening tag\n        // (starting after '<'), attributes, contents and closing tag.\n\n      }, {\n        key: \"jsx_parseElementAt\",\n        value: function jsx_parseElementAt(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n          var children = [];\n          var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n          var closingElement = null;\n\n          if (!openingElement.selfClosing) {\n            contents: for (;;) {\n              switch (this.type) {\n                case tok.jsxTagStart:\n                  startPos = this.start;\n                  startLoc = this.startLoc;\n                  this.next();\n\n                  if (this.eat(tt.slash)) {\n                    closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n                    break contents;\n                  }\n\n                  children.push(this.jsx_parseElementAt(startPos, startLoc));\n                  break;\n\n                case tok.jsxText:\n                  children.push(this.parseExprAtom());\n                  break;\n\n                case tt.braceL:\n                  children.push(this.jsx_parseExpressionContainer());\n                  break;\n\n                default:\n                  this.unexpected();\n              }\n            }\n\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(closingElement.start, 'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n            }\n          }\n\n          var fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n          node['opening' + fragmentOrElement] = openingElement;\n          node['closing' + fragmentOrElement] = closingElement;\n          node.children = children;\n\n          if (this.type === tt.relational && this.value === \"<\") {\n            this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n          }\n\n          return this.finishNode(node, 'JSX' + fragmentOrElement);\n        } // Parse JSX text\n\n      }, {\n        key: \"jsx_parseText\",\n        value: function jsx_parseText(value) {\n          var node = this.parseLiteral(value);\n          node.type = \"JSXText\";\n          return node;\n        } // Parses entire JSX element from current position.\n\n      }, {\n        key: \"jsx_parseElement\",\n        value: function jsx_parseElement() {\n          var startPos = this.start,\n              startLoc = this.startLoc;\n          this.next();\n          return this.jsx_parseElementAt(startPos, startLoc);\n        }\n      }, {\n        key: \"parseExprAtom\",\n        value: function parseExprAtom(refShortHandDefaultPos) {\n          if (this.type === tok.jsxText) return this.jsx_parseText(this.value);else if (this.type === tok.jsxTagStart) return this.jsx_parseElement();else return _get(_getPrototypeOf(_class.prototype), \"parseExprAtom\", this).call(this, refShortHandDefaultPos);\n        }\n      }, {\n        key: \"readToken\",\n        value: function readToken(code) {\n          var context = this.curContext();\n          if (context === tc_expr) return this.jsx_readToken();\n\n          if (context === tc_oTag || context === tc_cTag) {\n            if (isIdentifierStart(code)) return this.jsx_readWord();\n\n            if (code == 62) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagEnd);\n            }\n\n            if ((code === 34 || code === 39) && context == tc_oTag) return this.jsx_readString(code);\n          }\n\n          if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n            ++this.pos;\n            return this.finishToken(tok.jsxTagStart);\n          }\n\n          return _get(_getPrototypeOf(_class.prototype), \"readToken\", this).call(this, code);\n        }\n      }, {\n        key: \"updateContext\",\n        value: function updateContext(prevType) {\n          if (this.type == tt.braceL) {\n            var curContext = this.curContext();\n            if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);else _get(_getPrototypeOf(_class.prototype), \"updateContext\", this).call(this, prevType);\n            this.exprAllowed = true;\n          } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n            this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n\n            this.context.push(tc_cTag); // reconsider as closing tag context\n\n            this.exprAllowed = false;\n          } else {\n            return _get(_getPrototypeOf(_class.prototype), \"updateContext\", this).call(this, prevType);\n          }\n        }\n      }], [{\n        key: \"acornJsx\",\n        // Expose actual `tokTypes` and `tokContexts` to other plugins.\n        get: function get() {\n          return acornJsx;\n        }\n      }]);\n\n      return _class;\n    }(Parser)\n  );\n}","map":null,"metadata":{},"sourceType":"script"}