{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\nvar object,\n    _common,\n    __hasProp = {}.hasOwnProperty;\n\n_common = require('./_common');\nmodule.exports = object = {\n  isBareObject: _common.isBareObject.bind(_common),\n\n  /*\n  \tif object is an instance of a class\n  */\n  isInstance: function isInstance(what) {\n    return !this.isBareObject(what);\n  },\n\n  /*\n  \tAlias to _common.typeOf\n  */\n  typeOf: _common.typeOf.bind(_common),\n\n  /*\n  \tAlias to _common.clone\n  */\n  clone: _common.clone.bind(_common),\n\n  /*\n  \tEmpties an object of its properties.\n  */\n  empty: function empty(o) {\n    var prop;\n\n    for (prop in o) {\n      if (o.hasOwnProperty(prop)) {\n        delete o[prop];\n      }\n    }\n\n    return o;\n  },\n\n  /*\n  \tEmpties an object. Doesn't check for hasOwnProperty, so it's a tiny\n  \tbit faster. Use it for plain objects.\n  */\n  fastEmpty: function fastEmpty(o) {\n    var property;\n\n    for (property in o) {\n      delete o[property];\n    }\n\n    return o;\n  },\n\n  /*\n  \tOverrides values fomr `newValues` on `base`, as long as they\n  \talready exist in base.\n  */\n  overrideOnto: function overrideOnto(base, newValues) {\n    var key, newVal, oldVal;\n\n    if (!this.isBareObject(newValues) || !this.isBareObject(base)) {\n      return base;\n    }\n\n    for (key in base) {\n      oldVal = base[key];\n      newVal = newValues[key];\n\n      if (newVal === void 0) {\n        continue;\n      }\n\n      if (typeof newVal !== 'object' || this.isInstance(newVal)) {\n        base[key] = this.clone(newVal);\n      } else {\n        if (typeof oldVal !== 'object' || this.isInstance(oldVal)) {\n          base[key] = this.clone(newVal);\n        } else {\n          this.overrideOnto(oldVal, newVal);\n        }\n      }\n    }\n\n    return base;\n  },\n\n  /*\n  \tTakes a clone of 'base' and runs #overrideOnto on it\n  */\n  override: function override(base, newValues) {\n    return this.overrideOnto(this.clone(base), newValues);\n  },\n  append: function append(base, toAppend) {\n    return this.appendOnto(this.clone(base), toAppend);\n  },\n  appendOnto: function appendOnto(base, toAppend) {\n    var key, newVal, oldVal;\n\n    if (!this.isBareObject(toAppend) || !this.isBareObject(base)) {\n      return base;\n    }\n\n    for (key in toAppend) {\n      if (!__hasProp.call(toAppend, key)) continue;\n      newVal = toAppend[key];\n\n      if (newVal === void 0) {\n        continue;\n      }\n\n      if (typeof newVal !== 'object' || this.isInstance(newVal)) {\n        base[key] = newVal;\n      } else {\n        oldVal = base[key];\n\n        if (typeof oldVal !== 'object' || this.isInstance(oldVal)) {\n          base[key] = this.clone(newVal);\n        } else {\n          this.appendOnto(oldVal, newVal);\n        }\n      }\n    }\n\n    return base;\n  },\n  groupProps: function groupProps(obj, groups) {\n    var def, defs, grouped, key, name, shouldAdd, val, _i, _len;\n\n    grouped = {};\n\n    for (name in groups) {\n      defs = groups[name];\n      grouped[name] = {};\n    }\n\n    grouped['rest'] = {};\n\n    top: //;\n    for (key in obj) {\n      val = obj[key];\n      shouldAdd = false;\n\n      for (name in groups) {\n        defs = groups[name];\n\n        if (!Array.isArray(defs)) {\n          defs = [defs];\n        }\n\n        for (_i = 0, _len = defs.length; _i < _len; _i++) {\n          def = defs[_i];\n\n          if (typeof def === 'string') {\n            if (key === def) {\n              shouldAdd = true;\n            }\n          } else if (def instanceof RegExp) {\n            if (def.test(key)) {\n              shouldAdd = true;\n            }\n          } else if (def instanceof Function) {\n            if (def(key)) {\n              shouldAdd = true;\n            }\n          } else {\n            throw Error('Group definitions must either\\\n\t\t\t\t\t\tbe strings, regexes, or functions.');\n          }\n\n          if (shouldAdd) {\n            grouped[name][key] = val;\n            continue top;\n          }\n        }\n      }\n\n      grouped['rest'][key] = val;\n    }\n\n    return grouped;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}