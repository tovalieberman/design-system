{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\nvar self,\n    hasProp = {}.hasOwnProperty;\nmodule.exports = self = {\n  convert: function convert(obj) {\n    return self._arrayToChildren(obj);\n  },\n  _arrayToChildren: function _arrayToChildren(a, parent) {\n    var children, j, len, node, prev, v;\n\n    if (parent == null) {\n      parent = null;\n    }\n\n    children = [];\n    prev = null;\n\n    for (j = 0, len = a.length; j < len; j++) {\n      v = a[j];\n\n      if (typeof v === 'string') {\n        node = self._getTextNodeFor(v);\n      } else {\n        node = self._objectToNode(v, parent);\n        node.prev = null;\n        node.next = null;\n        node.parent = parent;\n\n        if (prev != null) {\n          node.prev = prev;\n          prev.next = node;\n        }\n\n        prev = node;\n      }\n\n      children.push(node);\n    }\n\n    return children;\n  },\n  _objectToNode: function _objectToNode(o) {\n    var attribs, children, i, k, key, name, node, ref, v, val;\n    i = 0;\n\n    for (k in o) {\n      if (!hasProp.call(o, k)) continue;\n      v = o[k];\n\n      if (i > 0) {\n        throw Error(\"_objectToNode() only accepts an object with one key/value\");\n      }\n\n      key = k;\n      val = v;\n      i++;\n    }\n\n    node = {};\n\n    if (typeof key !== 'string') {\n      throw Error(\"_objectToNode()'s key must be a string of tag name and classes\");\n    }\n\n    if (typeof val === 'string') {\n      children = [self._getTextNodeFor(val)];\n    } else if (Array.isArray(val)) {\n      children = self._arrayToChildren(val, node);\n    } else {\n      inspect(o);\n      throw Error(\"_objectToNode()'s key's value must only be a string or an array\");\n    }\n\n    node.type = 'tag';\n    ref = self._parseTag(key), name = ref.name, attribs = ref.attribs;\n    node.name = name;\n    node.attribs = attribs;\n    node.children = children;\n    return node;\n  },\n  _getTextNodeFor: function _getTextNodeFor(s) {\n    return {\n      type: 'text',\n      data: s\n    };\n  },\n  _nameRx: /^[a-zA-Z\\-\\_]{1}[a-zA-Z0-9\\-\\_]*$/,\n  _parseTag: function _parseTag(k) {\n    var attribs, classes, cls, id, m, name, parts;\n\n    if (!k.match(/^[a-zA-Z0-9\\#\\-\\_\\.\\[\\]\\\"\\'\\=\\,\\s]+$/) || k.match(/^[0-9]+/)) {\n      throw Error(\"cannot parse tag `\" + k + \"`\");\n    }\n\n    attribs = {};\n    parts = {\n      name: '',\n      attribs: attribs\n    };\n\n    if (m = k.match(/^([^\\.#]+)/)) {\n      name = m[1];\n\n      if (!name.match(self._nameRx)) {\n        throw Error(\"tag name `\" + name + \"` is not valid\");\n      }\n\n      parts.name = name;\n      k = k.substr(name.length, k.length);\n    }\n\n    if (m = k.match(/^#([a-zA-Z0-9\\-]+)/)) {\n      id = m[1];\n\n      if (!id.match(self._nameRx)) {\n        throw Error(\"tag id `\" + id + \"` is not valid\");\n      }\n\n      attribs.id = id;\n      k = k.substr(id.length + 1, k.length);\n    }\n\n    classes = [];\n\n    while (m = k.match(/\\.([a-zA-Z0-9\\-\\_]+)/)) {\n      cls = m[1];\n\n      if (!cls.match(self._nameRx)) {\n        throw Error(\"tag class `\" + cls + \"` is not valid\");\n      }\n\n      classes.push(cls);\n      k = k.replace('.' + cls, '');\n    }\n\n    if (classes.length) {\n      attribs[\"class\"] = classes.join(\" \");\n    }\n\n    return parts;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}