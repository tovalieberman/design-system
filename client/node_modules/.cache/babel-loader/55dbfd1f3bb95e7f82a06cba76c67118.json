{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar Rule, StyleSheet;\nRule = require('./Rule');\n\nmodule.exports = StyleSheet = function () {\n  var self;\n  self = StyleSheet;\n\n  function StyleSheet() {\n    this._rulesBySelector = {};\n  }\n\n  StyleSheet.prototype.setRule = function (selector, styles) {\n    var key, val;\n\n    if (typeof selector === 'string') {\n      this._setRule(selector, styles);\n    } else if (typeof selector === 'object') {\n      for (key in selector) {\n        val = selector[key];\n\n        this._setRule(key, val);\n      }\n    }\n\n    return this;\n  };\n\n  StyleSheet.prototype._setRule = function (s, styles) {\n    var i, len, ref, selector;\n    ref = self.splitSelectors(s);\n\n    for (i = 0, len = ref.length; i < len; i++) {\n      selector = ref[i];\n\n      this._setSingleRule(selector, styles);\n    }\n\n    return this;\n  };\n\n  StyleSheet.prototype._setSingleRule = function (s, styles) {\n    var rule, selector;\n    selector = self.normalizeSelector(s);\n\n    if (!(rule = this._rulesBySelector[selector])) {\n      rule = new Rule(selector);\n      this._rulesBySelector[selector] = rule;\n    }\n\n    rule.setStyles(styles);\n    return this;\n  };\n\n  StyleSheet.prototype.getRulesFor = function (el) {\n    var ref, rule, rules, selector;\n    rules = [];\n    ref = this._rulesBySelector;\n\n    for (selector in ref) {\n      rule = ref[selector];\n\n      if (rule.selector.matches(el)) {\n        rules.push(rule);\n      }\n    }\n\n    return rules;\n  };\n\n  StyleSheet.normalizeSelector = function (selector) {\n    return selector.replace(/[\\s]+/g, ' ').replace(/[\\s]*([>\\,\\+]{1})[\\s]*/g, '$1').trim();\n  };\n\n  StyleSheet.splitSelectors = function (s) {\n    return s.trim().split(',');\n  };\n\n  return StyleSheet;\n}();","map":null,"metadata":{},"sourceType":"script"}