{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.keys\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Group from 'react-group';\nimport objectToString from 'javascript-stringify';\nimport Arguments from 'rsg-components/Arguments';\nimport Argument from 'rsg-components/Argument';\nimport Code from 'rsg-components/Code';\nimport JsDoc from 'rsg-components/JsDoc';\nimport Markdown from 'rsg-components/Markdown';\nimport Name from 'rsg-components/Name';\nimport Type from 'rsg-components/Type';\nimport Text from 'rsg-components/Text';\nimport Para from 'rsg-components/Para';\nimport Table from 'rsg-components/Table';\nimport { unquote, getType, showSpaces } from './util';\n\nfunction renderType(type) {\n  if (!type) {\n    return 'unknown';\n  }\n\n  var name = type.name;\n\n  switch (name) {\n    case 'arrayOf':\n      return type.value.name + \"[]\";\n\n    case 'objectOf':\n      return \"{\" + renderType(type.value) + \"}\";\n\n    case 'instanceOf':\n      return type.value;\n\n    default:\n      return name;\n  }\n}\n\nfunction renderFlowType(type) {\n  if (!type) {\n    return 'unknown';\n  }\n\n  var name = type.name,\n      raw = type.raw,\n      value = type.value;\n\n  switch (name) {\n    case 'enum':\n      return name;\n\n    case 'literal':\n      return value;\n\n    case 'signature':\n      return renderComplexType(type.type, raw);\n\n    case 'union':\n    case 'tuple':\n      return renderComplexType(name, raw);\n\n    default:\n      return raw || name;\n  }\n}\n\nfunction renderComplexType(name, title) {\n  return React.createElement(Text, {\n    size: \"small\",\n    underlined: true,\n    title: title\n  }, name);\n}\n\nfunction renderEnum(prop) {\n  if (!Array.isArray(getType(prop).value)) {\n    return React.createElement(\"span\", null, getType(prop).value);\n  }\n\n  var values = getType(prop).value.map(function (_ref) {\n    var value = _ref.value;\n    return React.createElement(Code, {\n      key: value\n    }, showSpaces(unquote(value)));\n  });\n  return React.createElement(\"span\", null, \"One of: \", React.createElement(Group, {\n    separator: \", \"\n  }, values));\n}\n\nfunction renderShape(props) {\n  return Object.keys(props).map(function (name) {\n    var prop = props[name];\n    var defaultValue = renderDefault(prop);\n    var description = prop.description;\n    return React.createElement(\"div\", {\n      key: name\n    }, React.createElement(Name, null, name), ': ', React.createElement(Type, null, renderType(prop)), defaultValue && ' — ', defaultValue, description && ' — ', description && React.createElement(Markdown, {\n      text: description,\n      inline: true\n    }));\n  });\n}\n\nvar defaultValueBlacklist = ['null', 'undefined'];\n\nfunction renderDefault(prop) {\n  // Workaround for issue https://github.com/reactjs/react-docgen/issues/221\n  // If prop has defaultValue it can not be required\n  if (prop.defaultValue) {\n    if (prop.type || prop.flowType) {\n      var propName = prop.type ? prop.type.name : prop.flowType.type;\n\n      if (defaultValueBlacklist.indexOf(prop.defaultValue.value) > -1) {\n        return React.createElement(Code, null, showSpaces(unquote(prop.defaultValue.value)));\n      } else if (propName === 'func' || propName === 'function') {\n        return React.createElement(Text, {\n          size: \"small\",\n          color: \"light\",\n          underlined: true,\n          title: showSpaces(unquote(prop.defaultValue.value))\n        }, \"Function\");\n      } else if (propName === 'shape' || propName === 'object') {\n        try {\n          // We eval source code to be able to format the defaultProp here. This\n          // can be considered safe, as it is the source code that is evaled,\n          // which is from a known source and safe by default\n          // eslint-disable-next-line no-eval\n          var object = eval(\"(\" + prop.defaultValue.value + \")\");\n          return React.createElement(Text, {\n            size: \"small\",\n            color: \"light\",\n            underlined: true,\n            title: objectToString(object, null, 2)\n          }, \"Shape\");\n        } catch (e) {\n          // eval will throw if it contains a reference to a property not in the\n          // local scope. To avoid any breakage we fall back to rendering the\n          // prop without any formatting\n          return React.createElement(Text, {\n            size: \"small\",\n            color: \"light\",\n            underlined: true,\n            title: prop.defaultValue.value\n          }, \"Shape\");\n        }\n      }\n    }\n\n    return React.createElement(Code, null, showSpaces(unquote(prop.defaultValue.value)));\n  } else if (prop.required) {\n    return React.createElement(Text, {\n      size: \"small\",\n      color: \"light\"\n    }, \"Required\");\n  }\n\n  return '';\n}\n\nfunction renderDescription(prop) {\n  var description = prop.description,\n      _prop$tags = prop.tags,\n      tags = _prop$tags === void 0 ? {} : _prop$tags;\n  var extra = renderExtra(prop);\n  var args = [].concat(tags.arg || [], tags.argument || [], tags.param || []);\n  var returnDocumentation = tags.return && tags.return[0] || tags.returns && tags.returns[0];\n  return React.createElement(\"div\", null, description && React.createElement(Markdown, {\n    text: description\n  }), extra && React.createElement(Para, null, extra), React.createElement(JsDoc, tags), args.length > 0 && React.createElement(Arguments, {\n    args: args,\n    heading: true\n  }), returnDocumentation && React.createElement(Argument, _extends({}, returnDocumentation, {\n    returns: true\n  })));\n}\n\nfunction renderExtra(prop) {\n  var type = getType(prop);\n\n  if (!type) {\n    return null;\n  }\n\n  switch (type.name) {\n    case 'enum':\n      return renderEnum(prop);\n\n    case 'union':\n      return renderUnion(prop);\n\n    case 'shape':\n      return renderShape(prop.type.value);\n\n    case 'arrayOf':\n      if (type.value.name === 'shape') {\n        return renderShape(prop.type.value.value);\n      }\n\n      return null;\n\n    case 'objectOf':\n      if (type.value.name === 'shape') {\n        return renderShape(prop.type.value.value);\n      }\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction renderUnion(prop) {\n  var type = getType(prop);\n\n  if (!Array.isArray(type.value)) {\n    return React.createElement(\"span\", null, type.value);\n  }\n\n  var values = type.value.map(function (value, index) {\n    return React.createElement(Type, {\n      key: value.name + \"-\" + index\n    }, renderType(value));\n  });\n  return React.createElement(\"span\", null, \"One of type: \", React.createElement(Group, {\n    separator: \", \"\n  }, values));\n}\n\nfunction renderName(prop) {\n  var name = prop.name,\n      _prop$tags2 = prop.tags,\n      tags = _prop$tags2 === void 0 ? {} : _prop$tags2;\n  return React.createElement(Name, {\n    deprecated: !!tags.deprecated\n  }, name);\n}\n\nfunction renderTypeColumn(prop) {\n  if (prop.flowType) {\n    return React.createElement(Type, null, renderFlowType(getType(prop)));\n  }\n\n  return React.createElement(Type, null, renderType(getType(prop)));\n}\n\nexport function getRowKey(row) {\n  return row.name;\n}\nexport var columns = [{\n  caption: 'Prop name',\n  render: renderName\n}, {\n  caption: 'Type',\n  render: renderTypeColumn\n}, {\n  caption: 'Default',\n  render: renderDefault\n}, {\n  caption: 'Description',\n  render: renderDescription\n}];\nexport default function PropsRenderer(_ref2) {\n  var props = _ref2.props;\n  return React.createElement(Table, {\n    columns: columns,\n    rows: props,\n    getRowKey: getRowKey\n  });\n}\nPropsRenderer.propTypes = {\n  props: PropTypes.array.isRequired\n};","map":null,"metadata":{},"sourceType":"module"}