{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.function.name\";\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport Preview from 'rsg-components/Preview';\nimport Para from 'rsg-components/Para';\nimport Slot from 'rsg-components/Slot';\nimport PlaygroundRenderer from 'rsg-components/Playground/PlaygroundRenderer';\nimport Context from 'rsg-components/Context';\nimport { EXAMPLE_TAB_CODE_EDITOR } from '../slots';\nimport { DisplayModes, ExampleModes } from '../../consts';\n\nvar Playground =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Playground, _Component);\n\n  function Playground() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", debounce(function (code) {\n      _this.setState({\n        code: code\n      });\n    }, _this.context.config.previewDelay));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      code: _this.props.code,\n      prevCode: _this.props.code,\n      activeTab: _this.getInitialActiveTab() ? EXAMPLE_TAB_CODE_EDITOR : undefined\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabChange\", function (name) {\n      _this.setState(function (state) {\n        return {\n          activeTab: state.activeTab !== name ? name : undefined\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  Playground.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var code = nextProps.code;\n\n    if (prevState.prevCode !== code) {\n      return {\n        prevCode: code,\n        code: code\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Playground.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    // Clear pending changes\n    this.handleChange.cancel();\n  };\n\n  _proto.getInitialActiveTab = function getInitialActiveTab() {\n    var expandCode = this.props.exampleMode === ExampleModes.expand;\n    return this.props.settings.showcode !== undefined ? this.props.settings.showcode : expandCode;\n  };\n\n  _proto.render = function render() {\n    var _this$state = this.state,\n        code = _this$state.code,\n        activeTab = _this$state.activeTab;\n    var _this$props = this.props,\n        evalInContext = _this$props.evalInContext,\n        index = _this$props.index,\n        name = _this$props.name,\n        settings = _this$props.settings,\n        exampleMode = _this$props.exampleMode;\n    var displayMode = this.context.displayMode;\n    var isExampleHidden = exampleMode === ExampleModes.hide;\n    var isEditorHidden = settings.noeditor || isExampleHidden;\n    var preview = React.createElement(Preview, {\n      code: code,\n      evalInContext: evalInContext\n    });\n    return isEditorHidden ? React.createElement(Para, null, preview) : React.createElement(PlaygroundRenderer, {\n      name: name,\n      exampleIndex: index,\n      padded: !!settings.padded,\n      preview: preview,\n      previewProps: settings.props || {},\n      tabButtons: React.createElement(Slot, {\n        name: \"exampleTabButtons\",\n        active: activeTab,\n        props: {\n          onClick: this.handleTabChange\n        }\n      }),\n      tabBody: React.createElement(Slot, {\n        name: \"exampleTabs\",\n        active: activeTab,\n        onlyActive: true // evalInContext passed through to support custom slots that eval code\n        ,\n        props: {\n          code: code,\n          onChange: this.handleChange,\n          evalInContext: evalInContext\n        }\n      }),\n      toolbar: React.createElement(Slot, {\n        name: \"exampleToolbar\",\n        props: {\n          name: name,\n          isolated: displayMode === DisplayModes.example,\n          example: index\n        }\n      })\n    });\n  };\n\n  return Playground;\n}(Component);\n\n_defineProperty(Playground, \"propTypes\", {\n  code: PropTypes.string.isRequired,\n  evalInContext: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  exampleMode: PropTypes.string.isRequired,\n  settings: PropTypes.object\n});\n\n_defineProperty(Playground, \"defaultProps\", {\n  settings: {}\n});\n\n_defineProperty(Playground, \"contextType\", Context);\n\nexport default Playground;","map":null,"metadata":{},"sourceType":"module"}