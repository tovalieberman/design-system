{"ast":null,"code":"function walk(ast, _ref) {\n  var enter = _ref.enter,\n      leave = _ref.leave;\n  return visit(ast, null, enter, leave);\n}\n\nvar should_skip = false;\nvar should_remove = false;\nvar replacement = null;\nvar context = {\n  skip: function skip() {\n    return should_skip = true;\n  },\n  remove: function remove() {\n    return should_remove = true;\n  },\n  replace: function replace(node) {\n    return replacement = node;\n  }\n};\nvar childKeys = {};\n\nfunction replace(parent, prop, index, node) {\n  if (parent) {\n    if (index !== null) {\n      parent[prop][index] = node;\n    } else {\n      parent[prop] = node;\n    }\n  }\n}\n\nfunction remove(parent, prop, index) {\n  if (parent) {\n    if (index !== null) {\n      parent[prop].splice(index, 1);\n    } else {\n      delete parent[prop];\n    }\n  }\n}\n\nfunction visit(node, parent, enter, leave, prop, index) {\n  if (node) {\n    if (enter) {\n      var _should_skip = should_skip;\n      var _should_remove = should_remove;\n      var _replacement = replacement;\n      should_skip = false;\n      should_remove = false;\n      replacement = null;\n      enter.call(context, node, parent, prop, index);\n\n      if (replacement) {\n        node = replacement;\n        replace(parent, prop, index, node);\n      }\n\n      if (should_remove) {\n        remove(parent, prop, index);\n      }\n\n      var skipped = should_skip;\n      var removed = should_remove;\n      should_skip = _should_skip;\n      should_remove = _should_remove;\n      replacement = _replacement;\n      if (skipped) return node;\n      if (removed) return null;\n    }\n\n    var keys = node.type && childKeys[node.type] || (childKeys[node.type] = Object.keys(node).filter(function (key) {\n      return typeof node[key] === 'object';\n    }));\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var key = keys[i];\n      var value = node[key];\n\n      if (Array.isArray(value)) {\n        for (var j = 0, k = 0; j < value.length; j += 1, k += 1) {\n          if (value[j] && value[j].type) {\n            if (!visit(value[j], node, enter, leave, key, k)) {\n              // removed\n              j--;\n            }\n          }\n        }\n      } else if (value && value.type) {\n        visit(value, node, enter, leave, key, null);\n      }\n    }\n\n    if (leave) {\n      var _replacement2 = replacement;\n      var _should_remove2 = should_remove;\n      replacement = null;\n      should_remove = false;\n      leave.call(context, node, parent, prop, index);\n\n      if (replacement) {\n        node = replacement;\n        replace(parent, prop, index, node);\n      }\n\n      if (should_remove) {\n        remove(parent, prop, index);\n      }\n\n      var _removed = should_remove;\n      replacement = _replacement2;\n      should_remove = _should_remove2;\n      if (_removed) return null;\n    }\n  }\n\n  return node;\n}\n\nexport { walk, childKeys };","map":null,"metadata":{},"sourceType":"module"}