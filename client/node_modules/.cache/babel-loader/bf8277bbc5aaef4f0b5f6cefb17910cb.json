{"ast":null,"code":"// import React from 'react';\n// import PropTypes from 'prop-types';\n// import Logo from 'react-styleguidist/lib/client/rsg-components';\n// // import Logo from 'rsg-components/Logo';\n// import Markdown from 'rsg-components/Markdown';\n// import Styled from 'rsg-components/Styled';\n// import cx from 'clsx';\n// import Ribbon from 'rsg-components/Ribbon';\n// import Version from 'rsg-components/Version';\n// const styles = ({ color, fontFamily, fontSize, sidebarWidth, mq, space, maxWidth }) => ({\n// \troot: {\n// \t\tminHeight: '100vh',\n// \t\tbackgroundColor: color.baseBackground,\n// \t},\n// \thasSidebar: {\n// \t\tpaddingLeft: sidebarWidth,\n// \t\t[mq.small]: {\n// \t\t\tpaddingLeft: 0,\n// \t\t},\n// \t},\n// \tcontent: {\n// \t\tmaxWidth,\n// \t\tpadding: [[space[2], space[4]]],\n// \t\tmargin: [[0, 'auto']],\n// \t\t[mq.small]: {\n// \t\t\tpadding: space[2],\n// \t\t},\n// \t\tdisplay: 'block',\n// \t},\n// \tsidebar: {\n// \t\tbackgroundColor: color.sidebarBackground,\n// \t\tborder: [[color.border, 'solid']],\n// \t\tborderWidth: [[0, 1, 0, 0]],\n// \t\tposition: 'fixed',\n// \t\ttop: 0,\n// \t\tleft: 0,\n// \t\tbottom: 0,\n// \t\twidth: sidebarWidth,\n// \t\toverflow: 'auto',\n// \t\tWebkitOverflowScrolling: 'touch',\n// \t\t[mq.small]: {\n// \t\t\tposition: 'static',\n// \t\t\twidth: 'auto',\n// \t\t\tborderWidth: [[1, 0, 0, 0]],\n// \t\t\tpaddingBottom: space[0],\n// \t\t},\n// \t},\n// \tlogo: {\n// \t\tpadding: space[2],\n// \t\tborderBottom: [[1, color.border, 'solid']],\n// \t},\n// \tfooter: {\n// \t\tdisplay: 'block',\n// \t\tcolor: color.light,\n// \t\tfontFamily: fontFamily.base,\n// \t\tfontSize: fontSize.small,\n// \t},\n// });\n// export function StyleGuideRenderer({\n// \tclasses,\n// \ttitle,\n// \tversion,\n// \thomepageUrl,\n// \tchildren,\n// \ttoc,\n// \thasSidebar,\n// }) {\n// \treturn (\n// \t\t<div className={cx(classes.root, hasSidebar && classes.hasSidebar)}>\n// \t\t\t<main className={classes.content}>\n// \t\t\t\t{children}\n// \t\t\t\t<footer className={classes.footer}>\n// \t\t\t\t\t<Markdown text={`Created with [React Styleguidist](${homepageUrl})`} />\n// \t\t\t\t</footer>\n// \t\t\t</main>\n// \t\t\t{hasSidebar && (\n// \t\t\t\t<div className={classes.sidebar} data-testid=\"sidebar\">\n// \t\t\t\t\t<header className={classes.logo}>\n// \t\t\t\t\t\t<Logo>{title}</Logo>\n// \t\t\t\t\t\t{version && <Version>{version}</Version>}\n// \t\t\t\t\t</header>\n// \t\t\t\t\t{toc}\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t\t<Ribbon />\n// \t\t</div>\n// \t);\n// }\n// StyleGuideRenderer.propTypes = {\n// \tclasses: PropTypes.object.isRequired,\n// \ttitle: PropTypes.string.isRequired,\n// \tversion: PropTypes.string,\n// \thomepageUrl: PropTypes.string.isRequired,\n// \tchildren: PropTypes.node.isRequired,\n// \ttoc: PropTypes.node.isRequired,\n// \thasSidebar: PropTypes.bool,\n// };\n// export default Styled(styles)(StyleGuideRenderer);","map":{"version":3,"sources":["/Users/tliebe1/Code/design-system/glic-design-system/client/src/design-system-components/styleguidist-overrides/StyleGuideRenderer.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n// import Logo from 'react-styleguidist/lib/client/rsg-components';\n// // import Logo from 'rsg-components/Logo';\n// import Markdown from 'rsg-components/Markdown';\n// import Styled from 'rsg-components/Styled';\n// import cx from 'clsx';\n// import Ribbon from 'rsg-components/Ribbon';\n// import Version from 'rsg-components/Version';\n\n// const styles = ({ color, fontFamily, fontSize, sidebarWidth, mq, space, maxWidth }) => ({\n// \troot: {\n// \t\tminHeight: '100vh',\n// \t\tbackgroundColor: color.baseBackground,\n// \t},\n// \thasSidebar: {\n// \t\tpaddingLeft: sidebarWidth,\n// \t\t[mq.small]: {\n// \t\t\tpaddingLeft: 0,\n// \t\t},\n// \t},\n// \tcontent: {\n// \t\tmaxWidth,\n// \t\tpadding: [[space[2], space[4]]],\n// \t\tmargin: [[0, 'auto']],\n// \t\t[mq.small]: {\n// \t\t\tpadding: space[2],\n// \t\t},\n// \t\tdisplay: 'block',\n// \t},\n// \tsidebar: {\n// \t\tbackgroundColor: color.sidebarBackground,\n// \t\tborder: [[color.border, 'solid']],\n// \t\tborderWidth: [[0, 1, 0, 0]],\n// \t\tposition: 'fixed',\n// \t\ttop: 0,\n// \t\tleft: 0,\n// \t\tbottom: 0,\n// \t\twidth: sidebarWidth,\n// \t\toverflow: 'auto',\n// \t\tWebkitOverflowScrolling: 'touch',\n// \t\t[mq.small]: {\n// \t\t\tposition: 'static',\n// \t\t\twidth: 'auto',\n// \t\t\tborderWidth: [[1, 0, 0, 0]],\n// \t\t\tpaddingBottom: space[0],\n// \t\t},\n// \t},\n// \tlogo: {\n// \t\tpadding: space[2],\n// \t\tborderBottom: [[1, color.border, 'solid']],\n// \t},\n// \tfooter: {\n// \t\tdisplay: 'block',\n// \t\tcolor: color.light,\n// \t\tfontFamily: fontFamily.base,\n// \t\tfontSize: fontSize.small,\n// \t},\n// });\n\n// export function StyleGuideRenderer({\n// \tclasses,\n// \ttitle,\n// \tversion,\n// \thomepageUrl,\n// \tchildren,\n// \ttoc,\n// \thasSidebar,\n// }) {\n// \treturn (\n// \t\t<div className={cx(classes.root, hasSidebar && classes.hasSidebar)}>\n// \t\t\t<main className={classes.content}>\n// \t\t\t\t{children}\n// \t\t\t\t<footer className={classes.footer}>\n// \t\t\t\t\t<Markdown text={`Created with [React Styleguidist](${homepageUrl})`} />\n// \t\t\t\t</footer>\n// \t\t\t</main>\n// \t\t\t{hasSidebar && (\n// \t\t\t\t<div className={classes.sidebar} data-testid=\"sidebar\">\n// \t\t\t\t\t<header className={classes.logo}>\n// \t\t\t\t\t\t<Logo>{title}</Logo>\n// \t\t\t\t\t\t{version && <Version>{version}</Version>}\n// \t\t\t\t\t</header>\n// \t\t\t\t\t{toc}\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t\t<Ribbon />\n// \t\t</div>\n// \t);\n// }\n\n// StyleGuideRenderer.propTypes = {\n// \tclasses: PropTypes.object.isRequired,\n// \ttitle: PropTypes.string.isRequired,\n// \tversion: PropTypes.string,\n// \thomepageUrl: PropTypes.string.isRequired,\n// \tchildren: PropTypes.node.isRequired,\n// \ttoc: PropTypes.node.isRequired,\n// \thasSidebar: PropTypes.bool,\n// };\n\n// export default Styled(styles)(StyleGuideRenderer);\n"]},"metadata":{},"sourceType":"module"}