{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport inheritedInitials from 'css-initials/inherited';\nimport allInitials from 'css-initials/all';\nvar resetSheetOptions = {\n  meta: 'jss-plugin-isolate',\n  // Lets make it always the first one in sheets for testing\n  // and specificity.\n  index: -Infinity,\n  link: true\n};\nvar initialsMap = {\n  inherited: inheritedInitials,\n  all: allInitials\n};\n\nvar getStyle = function getStyle(option) {\n  if (option === void 0) {\n    option = 'inherited';\n  } // Option is either \"inherited\" or \"all\".\n\n\n  if (typeof option === 'string') return initialsMap[option];\n\n  if (typeof option === 'object') {\n    // Option is [\"all/inherited\", {...style}]\n    if (Array.isArray(option)) {\n      var type = option[0];\n      var style = option[1];\n      return _extends({}, initialsMap[type], style);\n    } // Option is a style object, use inherited initials by default.\n\n\n    return _extends({}, inheritedInitials, option);\n  }\n\n  return inheritedInitials;\n};\n\nvar shouldIsolate = function shouldIsolate(rule, sheet, options) {\n  var parent = rule.options.parent;\n\n  if (parent && (parent.type === 'keyframes' || parent.type === 'conditional')) {\n    return false;\n  }\n\n  var isolate = options.isolate == null ? true : options.isolate; // $FlowFixMe: isolate is only added as an option by this plugin which means we can't type it in jss\n\n  if (sheet.options.isolate != null) isolate = sheet.options.isolate;\n\n  if (rule.style.isolate != null) {\n    isolate = rule.style.isolate;\n    delete rule.style.isolate;\n  } // Option `isolate` may be for e.g. `{isolate: 'root'}`.\n  // In this case it must match the rule name in order to isolate it.\n\n\n  if (typeof isolate === 'string') {\n    return isolate === rule.key;\n  }\n\n  return isolate;\n};\n/**\n * Performance optimized debounce without using setTimeout.\n * Returns a function which:\n * - will execute the passed fn not more than once per delay\n * - will not execute the passed fn if last try was within delay\n */\n\n\nvar createDebounced = function createDebounced(fn, delay) {\n  if (delay === void 0) {\n    delay = 3;\n  }\n\n  var time = Date.now();\n  return function () {\n    var now = Date.now();\n    if (now - time < delay) return false;\n    time = now;\n    fn();\n    return true;\n  };\n};\n\nfunction jssIsolate(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var setSelectorDone = false;\n  var selectors = [];\n  var resetSheet;\n  var resetRule;\n\n  var setSelector = function setSelector() {\n    resetRule.selector = selectors.join(',\\n');\n  };\n\n  var setSelectorDebounced = createDebounced(setSelector);\n\n  function onProcessRule(rule, sheet) {\n    if (!sheet || sheet === resetSheet || rule.type !== 'style') return; // Type it as a StyleRule\n\n    var styleRule = rule;\n    if (!shouldIsolate(styleRule, sheet, options)) return; // Create a reset Style Sheet once and use it for all rules.\n\n    if (!resetRule) {\n      resetSheet = rule.options.jss.createStyleSheet({}, resetSheetOptions);\n      resetRule = resetSheet.addRule('reset', getStyle(options.reset));\n      resetSheet.attach();\n    } // Add reset rule class name to the classes map of users Style Sheet.\n\n\n    var selector = styleRule.selector;\n\n    if (selectors.indexOf(selector) === -1) {\n      selectors.push(selector);\n      setSelectorDone = setSelectorDebounced();\n    }\n  } // We make sure selector is set, because `debaunceMaybe` will not execute\n  // the fn if called within delay.\n\n\n  function onProcessSheet() {\n    if (!setSelectorDone && selectors.length) setSelector();\n  }\n\n  return {\n    onProcessRule: onProcessRule,\n    onProcessSheet: onProcessSheet\n  };\n}\n\nexport default jssIsolate;","map":null,"metadata":{},"sourceType":"module"}