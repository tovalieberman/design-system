{"ast":null,"code":"'use strict';\n\nvar isES5 = typeof Object.defineProperty === 'function' && typeof Object.defineProperties === 'function' && typeof Object.getPrototypeOf === 'function' && typeof Object.setPrototypeOf === 'function';\n\nif (!isES5) {\n  throw new TypeError('util.promisify requires a true ES5 environment');\n}\n\nvar getOwnPropertyDescriptors = require('object.getownpropertydescriptors');\n\nif (typeof Promise !== 'function') {\n  throw new TypeError('`Promise` must be globally available for util.promisify to work.');\n}\n\nvar slice = Function.call.bind(Array.prototype.slice);\nvar concat = Function.call.bind(Array.prototype.concat);\nvar forEach = Function.call.bind(Array.prototype.forEach);\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('') === 'symbol';\nvar kCustomPromisifiedSymbol = hasSymbols ? Symbol('util.promisify.custom') : null;\nvar kCustomPromisifyArgsSymbol = hasSymbols ? Symbol('customPromisifyArgs') : null;\n\nmodule.exports = function promisify(orig) {\n  if (typeof orig !== 'function') {\n    var error = new TypeError('The \"original\" argument must be of type function');\n    error.name = 'TypeError [ERR_INVALID_ARG_TYPE]';\n    error.code = 'ERR_INVALID_ARG_TYPE';\n    throw error;\n  }\n\n  if (hasSymbols && orig[kCustomPromisifiedSymbol]) {\n    var customFunction = orig[kCustomPromisifiedSymbol];\n\n    if (typeof customFunction !== 'function') {\n      throw new TypeError('The [util.promisify.custom] property must be a function');\n    }\n\n    Object.defineProperty(customFunction, kCustomPromisifiedSymbol, {\n      configurable: true,\n      enumerable: false,\n      value: customFunction,\n      writable: false\n    });\n    return customFunction;\n  } // Names to create an object from in case the callback receives multiple\n  // arguments, e.g. ['stdout', 'stderr'] for child_process.exec.\n\n\n  var argumentNames = orig[kCustomPromisifyArgsSymbol];\n\n  var promisified = function fn() {\n    var args = slice(arguments);\n    var self = this; // eslint-disable-line no-invalid-this\n\n    return new Promise(function (resolve, reject) {\n      orig.apply(self, concat(args, function (err) {\n        var values = arguments.length > 1 ? slice(arguments, 1) : [];\n\n        if (err) {\n          reject(err);\n        } else if (typeof argumentNames !== 'undefined' && values.length > 1) {\n          var obj = {};\n          forEach(argumentNames, function (name, index) {\n            obj[name] = values[index];\n          });\n          resolve(obj);\n        } else {\n          resolve(values[0]);\n        }\n      }));\n    });\n  };\n\n  Object.setPrototypeOf(promisified, Object.getPrototypeOf(orig));\n  Object.defineProperty(promisified, kCustomPromisifiedSymbol, {\n    configurable: true,\n    enumerable: false,\n    value: promisified,\n    writable: false\n  });\n  return Object.defineProperties(promisified, getOwnPropertyDescriptors(orig));\n};\n\nmodule.exports.custom = kCustomPromisifiedSymbol;\nmodule.exports.customPromisifyArgs = kCustomPromisifyArgsSymbol;","map":null,"metadata":{},"sourceType":"script"}