{"ast":null,"code":"// @ts-check\n\n/* eslint-disable */\n/// <reference path=\"../typings.d.ts\" />\n\n/* eslint-enable */\n'use strict';\n/**\n * This file provides access to all public htmlWebpackPlugin hooks\n */\n\n/** @typedef {import(\"webpack/lib/Compilation.js\")} WebpackCompilation */\n\n/** @typedef {import(\"../index.js\")} HtmlWebpackPlugin */\n\nvar AsyncSeriesWaterfallHook = require('tapable').AsyncSeriesWaterfallHook; // The following typedef holds the API definition for all available hooks\n// to allow easier access when using ts-check or typescript inside plugins\n\n/** @typedef {{\n\n  beforeAssetTagGeneration:\n    AsyncSeriesWaterfallHook<{\n      assets: {\n        publicPath: string,\n        js: Array<string>,\n        css: Array<string>,\n        favicon?: string | undefined,\n        manifest?: string | undefined\n      },\n      outputName: string,\n      plugin: HtmlWebpackPlugin\n    }>,\n\n  alterAssetTags:\n    AsyncSeriesWaterfallHook<{\n      assetTags: {\n        scripts: Array<HtmlTagObject>,\n        styles: Array<HtmlTagObject>,\n        meta: Array<HtmlTagObject>,\n      },\n      outputName: string,\n      plugin: HtmlWebpackPlugin\n    }>,\n\n  alterAssetTagGroups:\n    AsyncSeriesWaterfallHook<{\n      headTags: Array<HtmlTagObject | HtmlTagObject>,\n      bodyTags: Array<HtmlTagObject | HtmlTagObject>,\n      outputName: string,\n      plugin: HtmlWebpackPlugin\n    }>,\n\n  afterTemplateExecution:\n    AsyncSeriesWaterfallHook<{\n      html: string,\n      headTags: Array<HtmlTagObject | HtmlTagObject>,\n      bodyTags: Array<HtmlTagObject | HtmlTagObject>,\n      outputName: string,\n      plugin: HtmlWebpackPlugin,\n    }>,\n\n  beforeEmit:\n    AsyncSeriesWaterfallHook<{\n      html: string,\n      outputName: string,\n      plugin: HtmlWebpackPlugin,\n    }>,\n\n  afterEmit:\n    AsyncSeriesWaterfallHook<{\n      outputName: string,\n      plugin: HtmlWebpackPlugin\n    }>,\n\n  }} HtmlWebpackPluginHooks\n  */\n\n/**\n * @type {WeakMap<WebpackCompilation, HtmlWebpackPluginHooks>}}\n */\n\n\nvar htmlWebpackPluginHooksMap = new WeakMap();\n/**\n * Returns all public hooks of the html webpack plugin for the given compilation\n *\n * @param {WebpackCompilation} compilation\n * @returns {HtmlWebpackPluginHooks}\n */\n\nfunction getHtmlWebpackPluginHooks(compilation) {\n  var hooks = htmlWebpackPluginHooksMap.get(compilation); // Setup the hooks only once\n\n  if (hooks === undefined) {\n    hooks = createHtmlWebpackPluginHooks();\n    htmlWebpackPluginHooksMap.set(compilation, hooks);\n  }\n\n  return hooks;\n}\n/**\n * Add hooks to the webpack compilation object to allow foreign plugins to\n * extend the HtmlWebpackPlugin\n *\n * @returns {HtmlWebpackPluginHooks}\n */\n\n\nfunction createHtmlWebpackPluginHooks() {\n  return {\n    beforeAssetTagGeneration: new AsyncSeriesWaterfallHook(['pluginArgs']),\n    alterAssetTags: new AsyncSeriesWaterfallHook(['pluginArgs']),\n    alterAssetTagGroups: new AsyncSeriesWaterfallHook(['pluginArgs']),\n    afterTemplateExecution: new AsyncSeriesWaterfallHook(['pluginArgs']),\n    beforeEmit: new AsyncSeriesWaterfallHook(['pluginArgs']),\n    afterEmit: new AsyncSeriesWaterfallHook(['pluginArgs'])\n  };\n}\n\nmodule.exports = {\n  getHtmlWebpackPluginHooks: getHtmlWebpackPluginHooks\n};","map":null,"metadata":{},"sourceType":"script"}