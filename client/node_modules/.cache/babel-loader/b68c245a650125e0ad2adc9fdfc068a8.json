{"ast":null,"code":"// Generated by CoffeeScript 1.8.0\nvar ParsedError,\n    PrettyError,\n    RenderKid,\n    array,\n    defaultStyle,\n    instance,\n    nodePaths,\n    object,\n    prop,\n    _fn,\n    _i,\n    _len,\n    _ref,\n    _ref1,\n    __slice = [].slice,\n    __indexOf = [].indexOf || function (item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item) return i;\n  }\n\n  return -1;\n};\n\n_ref = require('utila'), object = _ref.object, array = _ref.array;\ndefaultStyle = require('./defaultStyle');\nParsedError = require('./ParsedError');\nnodePaths = require('./nodePaths');\nRenderKid = require('renderkid');\ninstance = null;\n\nmodule.exports = PrettyError = function () {\n  var self;\n  self = PrettyError;\n  PrettyError._filters = {\n    'module.exports': function moduleExports(item) {\n      if (item.what == null) {\n        return;\n      }\n\n      item.what = item.what.replace(/\\.module\\.exports\\./g, ' - ');\n    }\n  };\n\n  PrettyError._getDefaultStyle = function () {\n    return defaultStyle();\n  };\n\n  PrettyError.start = function () {\n    if (instance == null) {\n      instance = new self();\n      instance.start();\n    }\n\n    return instance;\n  };\n\n  PrettyError.stop = function () {\n    return instance != null ? instance.stop() : void 0;\n  };\n\n  function PrettyError() {\n    this._useColors = true;\n    this._maxItems = 50;\n    this._packagesToSkip = [];\n    this._pathsToSkip = [];\n    this._skipCallbacks = [];\n    this._filterCallbacks = [];\n    this._parsedErrorFilters = [];\n    this._aliases = [];\n    this._renderer = new RenderKid();\n    this._style = self._getDefaultStyle();\n\n    this._renderer.style(this._style);\n  }\n\n  PrettyError.prototype.start = function () {\n    var prepeare;\n    this._oldPrepareStackTrace = Error.prepareStackTrace;\n\n    prepeare = this._oldPrepareStackTrace || function (exc, frames) {\n      var result;\n      result = exc.toString();\n      frames = frames.map(function (frame) {\n        return \"  at \" + frame.toString();\n      });\n      return result + \"\\n\" + frames.join(\"\\n\");\n    };\n\n    Error.prepareStackTrace = function (_this) {\n      return function (exc, trace) {\n        var stack;\n        stack = prepeare.apply(null, arguments);\n        return _this.render({\n          stack: stack,\n          message: exc.toString().replace(/^.*: /, '')\n        }, false);\n      };\n    }(this);\n\n    return this;\n  };\n\n  PrettyError.prototype.stop = function () {\n    Error.prepareStackTrace = this._oldPrepareStackTrace;\n    return this._oldPrepareStackTrace = null;\n  };\n\n  PrettyError.prototype.config = function (c) {\n    var alias, path, _ref1;\n\n    if (c.skipPackages != null) {\n      if (c.skipPackages === false) {\n        this.unskipAllPackages();\n      } else {\n        this.skipPackage.apply(this, c.skipPackages);\n      }\n    }\n\n    if (c.skipPaths != null) {\n      if (c.skipPaths === false) {\n        this.unskipAllPaths();\n      } else {\n        this.skipPath.apply(this, c.skipPaths);\n      }\n    }\n\n    if (c.skip != null) {\n      if (c.skip === false) {\n        this.unskipAll();\n      } else {\n        this.skip.apply(this, c.skip);\n      }\n    }\n\n    if (c.maxItems != null) {\n      this.setMaxItems(c.maxItems);\n    }\n\n    if (c.skipNodeFiles === true) {\n      this.skipNodeFiles();\n    } else if (c.skipNodeFiles === false) {\n      this.unskipNodeFiles();\n    }\n\n    if (c.filters != null) {\n      if (c.filters === false) {\n        this.removeAllFilters();\n      } else {\n        this.filter.apply(this, c.filters);\n      }\n    }\n\n    if (c.parsedErrorFilters != null) {\n      if (c.parsedErrorFilters === false) {\n        this.removeAllParsedErrorFilters();\n      } else {\n        this.filterParsedError.apply(this, c.parsedErrorFilters);\n      }\n    }\n\n    if (c.aliases != null) {\n      if (object.isBareObject(c.aliases)) {\n        _ref1 = c.aliases;\n\n        for (path in _ref1) {\n          alias = _ref1[path];\n          this.alias(path, alias);\n        }\n      } else if (c.aliases === false) {\n        this.removeAllAliases();\n      }\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.withoutColors = function () {\n    this._useColors = false;\n    return this;\n  };\n\n  PrettyError.prototype.withColors = function () {\n    this._useColors = true;\n    return this;\n  };\n\n  PrettyError.prototype.skipPackage = function () {\n    var packages, pkg, _i, _len;\n\n    packages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = packages.length; _i < _len; _i++) {\n      pkg = packages[_i];\n\n      this._packagesToSkip.push(String(pkg));\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.unskipPackage = function () {\n    var packages, pkg, _i, _len;\n\n    packages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = packages.length; _i < _len; _i++) {\n      pkg = packages[_i];\n      array.pluckOneItem(this._packagesToSkip, pkg);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.unskipAllPackages = function () {\n    this._packagesToSkip.length = 0;\n    return this;\n  };\n\n  PrettyError.prototype.skipPath = function () {\n    var path, paths, _i, _len;\n\n    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = paths.length; _i < _len; _i++) {\n      path = paths[_i];\n\n      this._pathsToSkip.push(path);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.unskipPath = function () {\n    var path, paths, _i, _len;\n\n    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = paths.length; _i < _len; _i++) {\n      path = paths[_i];\n      array.pluckOneItem(this._pathsToSkip, path);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.unskipAllPaths = function () {\n    this._pathsToSkip.length = 0;\n    return this;\n  };\n\n  PrettyError.prototype.skip = function () {\n    var callbacks, cb, _i, _len;\n\n    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n      cb = callbacks[_i];\n\n      this._skipCallbacks.push(cb);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.unskip = function () {\n    var callbacks, cb, _i, _len;\n\n    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n      cb = callbacks[_i];\n      array.pluckOneItem(this._skipCallbacks, cb);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.unskipAll = function () {\n    this._skipCallbacks.length = 0;\n    return this;\n  };\n\n  PrettyError.prototype.skipNodeFiles = function () {\n    return this.skipPath.apply(this, nodePaths);\n  };\n\n  PrettyError.prototype.unskipNodeFiles = function () {\n    return this.unskipPath.apply(this, nodePaths);\n  };\n\n  PrettyError.prototype.filter = function () {\n    var callbacks, cb, _i, _len;\n\n    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n      cb = callbacks[_i];\n\n      this._filterCallbacks.push(cb);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.removeFilter = function () {\n    var callbacks, cb, _i, _len;\n\n    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n      cb = callbacks[_i];\n      array.pluckOneItem(this._filterCallbacks, cb);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.removeAllFilters = function () {\n    this._filterCallbacks.length = 0;\n    return this;\n  };\n\n  PrettyError.prototype.filterParsedError = function () {\n    var callbacks, cb, _i, _len;\n\n    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n      cb = callbacks[_i];\n\n      this._parsedErrorFilters.push(cb);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.removeParsedErrorFilter = function () {\n    var callbacks, cb, _i, _len;\n\n    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n\n    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {\n      cb = callbacks[_i];\n      array.pluckOneItem(this._parsedErrorFilters, cb);\n    }\n\n    return this;\n  };\n\n  PrettyError.prototype.removeAllParsedErrorFilters = function () {\n    this._parsedErrorFilters.length = 0;\n    return this;\n  };\n\n  PrettyError.prototype.setMaxItems = function (maxItems) {\n    if (maxItems == null) {\n      maxItems = 50;\n    }\n\n    if (maxItems === 0) {\n      maxItems = 50;\n    }\n\n    this._maxItems = maxItems | 0;\n    return this;\n  };\n\n  PrettyError.prototype.alias = function (stringOrRx, alias) {\n    this._aliases.push({\n      stringOrRx: stringOrRx,\n      alias: alias\n    });\n\n    return this;\n  };\n\n  PrettyError.prototype.removeAlias = function (stringOrRx) {\n    array.pluckByCallback(this._aliases, function (pair) {\n      return pair.stringOrRx === stringOrRx;\n    });\n    return this;\n  };\n\n  PrettyError.prototype.removeAllAliases = function () {\n    this._aliases.length = 0;\n    return this;\n  };\n\n  PrettyError.prototype._getStyle = function () {\n    return this._style;\n  };\n\n  PrettyError.prototype.appendStyle = function (toAppend) {\n    object.appendOnto(this._style, toAppend);\n\n    this._renderer.style(toAppend);\n\n    return this;\n  };\n\n  PrettyError.prototype._getRenderer = function () {\n    return this._renderer;\n  };\n\n  PrettyError.prototype.render = function (e, logIt, useColors) {\n    var obj, rendered;\n\n    if (logIt == null) {\n      logIt = false;\n    }\n\n    if (useColors == null) {\n      useColors = this._useColors;\n    }\n\n    obj = this.getObject(e);\n    rendered = this._renderer.render(obj, useColors);\n\n    if (logIt === true) {\n      console.error(rendered);\n    }\n\n    return rendered;\n  };\n\n  PrettyError.prototype.getObject = function (e) {\n    var count, header, i, item, obj, traceItems, _i, _len, _ref1;\n\n    if (!(e instanceof ParsedError)) {\n      e = new ParsedError(e);\n    }\n\n    this._applyParsedErrorFiltersOn(e);\n\n    header = {\n      title: function () {\n        var ret;\n        ret = {};\n\n        if (e.wrapper !== '') {\n          ret.wrapper = \"\" + e.wrapper;\n        }\n\n        ret.kind = e.kind;\n        return ret;\n      }(),\n      colon: ':',\n      message: String(e.message).trim()\n    };\n    traceItems = [];\n    count = -1;\n    _ref1 = e.trace;\n\n    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {\n      item = _ref1[i];\n\n      if (item == null) {\n        continue;\n      }\n\n      if (this._skipOrFilter(item, i) === true) {\n        continue;\n      }\n\n      count++;\n\n      if (count > this._maxItems) {\n        break;\n      }\n\n      if (typeof item === 'string') {\n        traceItems.push({\n          item: {\n            custom: item\n          }\n        });\n        continue;\n      }\n\n      traceItems.push(function () {\n        var markupItem;\n        markupItem = {\n          item: {\n            header: {\n              pointer: function () {\n                if (item.file == null) {\n                  return '';\n                }\n\n                return {\n                  file: item.file,\n                  colon: ':',\n                  line: item.line\n                };\n              }()\n            },\n            footer: function () {\n              var foooter;\n              foooter = {\n                addr: item.shortenedAddr\n              };\n\n              if (item.extra != null) {\n                foooter.extra = item.extra;\n              }\n\n              return foooter;\n            }()\n          }\n        };\n\n        if (typeof item.what === 'string' && item.what.trim().length > 0) {\n          markupItem.item.header.what = item.what;\n        }\n\n        return markupItem;\n      }());\n    }\n\n    obj = {\n      'pretty-error': {\n        header: header\n      }\n    };\n\n    if (traceItems.length > 0) {\n      obj['pretty-error'].trace = traceItems;\n    }\n\n    return obj;\n  };\n\n  PrettyError.prototype._skipOrFilter = function (item, itemNumber) {\n    var cb, modName, pair, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;\n\n    if (typeof item === 'object') {\n      if (_ref1 = item.modName, __indexOf.call(this._packagesToSkip, _ref1) >= 0) {\n        return true;\n      }\n\n      if (_ref2 = item.path, __indexOf.call(this._pathsToSkip, _ref2) >= 0) {\n        return true;\n      }\n\n      _ref3 = item.packages;\n\n      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\n        modName = _ref3[_i];\n\n        if (__indexOf.call(this._packagesToSkip, modName) >= 0) {\n          return true;\n        }\n      }\n\n      if (typeof item.shortenedAddr === 'string') {\n        _ref4 = this._aliases;\n\n        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {\n          pair = _ref4[_j];\n          item.shortenedAddr = item.shortenedAddr.replace(pair.stringOrRx, pair.alias);\n        }\n      }\n    }\n\n    _ref5 = this._skipCallbacks;\n\n    for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {\n      cb = _ref5[_k];\n\n      if (cb(item, itemNumber) === true) {\n        return true;\n      }\n    }\n\n    _ref6 = this._filterCallbacks;\n\n    for (_l = 0, _len3 = _ref6.length; _l < _len3; _l++) {\n      cb = _ref6[_l];\n      cb(item, itemNumber);\n    }\n\n    return false;\n  };\n\n  PrettyError.prototype._applyParsedErrorFiltersOn = function (error) {\n    var cb, _i, _len, _ref1;\n\n    _ref1 = this._parsedErrorFilters;\n\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      cb = _ref1[_i];\n      cb(error);\n    }\n  };\n\n  return PrettyError;\n}();\n\n_ref1 = ['renderer', 'style'];\n\n_fn = function _fn() {\n  var methodName;\n  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length);\n  return PrettyError.prototype.__defineGetter__(prop, function () {\n    return this[methodName]();\n  });\n};\n\nfor (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n  prop = _ref1[_i];\n\n  _fn();\n}","map":null,"metadata":{},"sourceType":"script"}