{"ast":null,"code":"import \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.keys\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'clsx';\nimport Styled from 'rsg-components/Styled';\nexport var styles = function styles(_ref) {\n  var space = _ref.space,\n      color = _ref.color,\n      borderRadius = _ref.borderRadius;\n  return {\n    root: {\n      marginBottom: space[4]\n    },\n    preview: {\n      padding: space[2],\n      border: [[1, color.border, 'solid']],\n      borderRadius: borderRadius,\n      // the next 2 lines are required to contain floated components\n      width: '100%',\n      display: 'inline-block'\n    },\n    controls: {\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: space[1]\n    },\n    toolbar: {\n      marginLeft: 'auto'\n    },\n    tab: {},\n    // expose className to allow using it in 'styles' settings\n    padded: {\n      // add padding between each example element rendered\n      '& > *': {\n        isolate: false,\n        marginLeft: -space[1],\n        marginRight: -space[1],\n        '& > *': {\n          isolate: false,\n          marginRight: space[1],\n          marginLeft: space[1]\n        }\n      }\n    }\n  };\n};\nexport function PlaygroundRenderer(_ref2) {\n  var _cx;\n\n  var classes = _ref2.classes,\n      exampleIndex = _ref2.exampleIndex,\n      name = _ref2.name,\n      padded = _ref2.padded,\n      preview = _ref2.preview,\n      previewProps = _ref2.previewProps,\n      tabButtons = _ref2.tabButtons,\n      tabBody = _ref2.tabBody,\n      toolbar = _ref2.toolbar;\n\n  var className = previewProps.className,\n      props = _objectWithoutPropertiesLoose(previewProps, [\"className\"]);\n\n  var previewClasses = cx(classes.preview, className, (_cx = {}, _cx[classes.padded] = padded, _cx));\n  return React.createElement(\"div\", {\n    className: classes.root,\n    \"data-testid\": name + \"-example-\" + exampleIndex\n  }, React.createElement(\"div\", _extends({\n    className: previewClasses\n  }, props, {\n    \"data-preview\": name,\n    \"data-testid\": \"preview-wrapper\"\n  }), preview), React.createElement(\"div\", {\n    className: classes.controls\n  }, React.createElement(\"div\", {\n    className: classes.tabs\n  }, tabButtons), React.createElement(\"div\", {\n    className: classes.toolbar\n  }, toolbar)), React.createElement(\"div\", {\n    className: classes.tab\n  }, tabBody));\n}\nPlaygroundRenderer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  exampleIndex: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  padded: PropTypes.bool.isRequired,\n  preview: PropTypes.node.isRequired,\n  previewProps: PropTypes.object.isRequired,\n  tabButtons: PropTypes.node.isRequired,\n  tabBody: PropTypes.node.isRequired,\n  toolbar: PropTypes.node.isRequired\n};\nexport default Styled(styles)(PlaygroundRenderer);","map":null,"metadata":{},"sourceType":"module"}