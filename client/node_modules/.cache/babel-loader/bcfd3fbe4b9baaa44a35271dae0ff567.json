{"ast":null,"code":"/* This loader renders the template with underscore if no other loader was found */\n'use strict';\n\nvar _ = require('lodash');\n\nvar loaderUtils = require('loader-utils');\n\nmodule.exports = function (source) {\n  if (this.cacheable) {\n    this.cacheable();\n  }\n\n  var allLoadersButThisOne = this.loaders.filter(function (loader) {\n    // Loader API changed from `loader.module` to `loader.normal` in Webpack 2.\n    return (loader.module || loader.normal) !== module.exports;\n  }); // This loader shouldn't kick in if there is any other loader\n\n  if (allLoadersButThisOne.length > 0) {\n    return source;\n  } // Skip .js files\n\n\n  if (/\\.js$/.test(this.resourcePath)) {\n    return source;\n  } // The following part renders the tempalte with lodash as aminimalistic loader\n  //\n  // Get templating options\n\n\n  var options = this.query !== '' ? loaderUtils.parseQuery(this.query) : {};\n\n  var template = _.template(source, _.defaults(options, {\n    variable: 'data'\n  })); // Require !!lodash - using !! will disable all loaders (e.g. babel)\n\n\n  return 'var _ = require(' + loaderUtils.stringifyRequest(this, '!!' + require.resolve('lodash')) + ');' + 'module.exports = function (templateParams) { with(templateParams) {' + // Execute the lodash template\n  'return (' + template.source + ')();' + '}}';\n};","map":null,"metadata":{},"sourceType":"script"}