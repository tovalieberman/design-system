{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar Block, SpecialString, object, terminalWidth;\nSpecialString = require('./SpecialString');\nobject = require('utila').object;\nterminalWidth = require('../tools').getCols();\n\nmodule.exports = Block = function () {\n  var self;\n  self = Block;\n  Block.defaultConfig = {\n    blockPrependor: {\n      fn: require('./block/blockPrependor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    blockAppendor: {\n      fn: require('./block/blockAppendor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    linePrependor: {\n      fn: require('./block/linePrependor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    lineAppendor: {\n      fn: require('./block/lineAppendor/Default'),\n      options: {\n        amount: 0\n      }\n    },\n    lineWrapper: {\n      fn: require('./block/lineWrapper/Default'),\n      options: {\n        lineWidth: null\n      }\n    },\n    width: terminalWidth,\n    prefixRaw: '',\n    suffixRaw: ''\n  };\n\n  function Block(_layout, _parent, config, _name) {\n    this._layout = _layout;\n    this._parent = _parent;\n\n    if (config == null) {\n      config = {};\n    }\n\n    this._name = _name != null ? _name : '';\n    this._config = object.append(self.defaultConfig, config);\n    this._closed = false;\n    this._wasOpenOnce = false;\n    this._active = false;\n    this._buffer = '';\n    this._didSeparateBlock = false;\n    this._linePrependor = new this._config.linePrependor.fn(this._config.linePrependor.options);\n    this._lineAppendor = new this._config.lineAppendor.fn(this._config.lineAppendor.options);\n    this._blockPrependor = new this._config.blockPrependor.fn(this._config.blockPrependor.options);\n    this._blockAppendor = new this._config.blockAppendor.fn(this._config.blockAppendor.options);\n  }\n\n  Block.prototype._activate = function (deactivateParent) {\n    if (deactivateParent == null) {\n      deactivateParent = true;\n    }\n\n    if (this._active) {\n      throw Error(\"This block is already active. This is probably a bug in RenderKid itself\");\n    }\n\n    if (this._closed) {\n      throw Error(\"This block is closed and cannot be activated. This is probably a bug in RenderKid itself\");\n    }\n\n    this._active = true;\n    this._layout._activeBlock = this;\n\n    if (deactivateParent) {\n      if (this._parent != null) {\n        this._parent._deactivate(false);\n      }\n    }\n\n    return this;\n  };\n\n  Block.prototype._deactivate = function (activateParent) {\n    if (activateParent == null) {\n      activateParent = true;\n    }\n\n    this._ensureActive();\n\n    this._flushBuffer();\n\n    if (activateParent) {\n      if (this._parent != null) {\n        this._parent._activate(false);\n      }\n    }\n\n    this._active = false;\n    return this;\n  };\n\n  Block.prototype._ensureActive = function () {\n    if (!this._wasOpenOnce) {\n      throw Error(\"This block has never been open before. This is probably a bug in RenderKid itself.\");\n    }\n\n    if (!this._active) {\n      throw Error(\"This block is not active. This is probably a bug in RenderKid itself.\");\n    }\n\n    if (this._closed) {\n      throw Error(\"This block is already closed. This is probably a bug in RenderKid itself.\");\n    }\n  };\n\n  Block.prototype._open = function () {\n    if (this._wasOpenOnce) {\n      throw Error(\"Block._open() has been called twice. This is probably a RenderKid bug.\");\n    }\n\n    this._wasOpenOnce = true;\n\n    if (this._parent != null) {\n      this._parent.write(this._whatToPrependToBlock());\n    }\n\n    this._activate();\n\n    return this;\n  };\n\n  Block.prototype.close = function () {\n    this._deactivate();\n\n    this._closed = true;\n\n    if (this._parent != null) {\n      this._parent.write(this._whatToAppendToBlock());\n    }\n\n    return this;\n  };\n\n  Block.prototype.isOpen = function () {\n    return this._wasOpenOnce && !this._closed;\n  };\n\n  Block.prototype.write = function (str) {\n    this._ensureActive();\n\n    if (str === '') {\n      return;\n    }\n\n    str = String(str);\n    this._buffer += str;\n    return this;\n  };\n\n  Block.prototype.openBlock = function (config, name) {\n    var block;\n\n    this._ensureActive();\n\n    block = new Block(this._layout, this, config, name);\n\n    block._open();\n\n    return block;\n  };\n\n  Block.prototype._flushBuffer = function () {\n    var str;\n\n    if (this._buffer === '') {\n      return;\n    }\n\n    str = this._buffer;\n    this._buffer = '';\n\n    this._writeInline(str);\n  };\n\n  Block.prototype._toPrependToLine = function () {\n    var fromParent;\n    fromParent = '';\n\n    if (this._parent != null) {\n      fromParent = this._parent._toPrependToLine();\n    }\n\n    return this._linePrependor.render(fromParent);\n  };\n\n  Block.prototype._toAppendToLine = function () {\n    var fromParent;\n    fromParent = '';\n\n    if (this._parent != null) {\n      fromParent = this._parent._toAppendToLine();\n    }\n\n    return this._lineAppendor.render(fromParent);\n  };\n\n  Block.prototype._whatToPrependToBlock = function () {\n    return this._blockPrependor.render();\n  };\n\n  Block.prototype._whatToAppendToBlock = function () {\n    return this._blockAppendor.render();\n  };\n\n  Block.prototype._writeInline = function (str) {\n    var i, j, k, l, lineBreaksToAppend, m, ref, ref1, ref2, remaining;\n\n    if (SpecialString(str).isOnlySpecialChars()) {\n      this._layout._append(str);\n\n      return;\n    }\n\n    remaining = str;\n    lineBreaksToAppend = 0;\n\n    if (m = remaining.match(/^\\n+/)) {\n      for (i = j = 1, ref = m[0].length; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {\n        this._writeLine('');\n      }\n\n      remaining = remaining.substr(m[0].length, remaining.length);\n    }\n\n    if (m = remaining.match(/\\n+$/)) {\n      lineBreaksToAppend = m[0].length;\n      remaining = remaining.substr(0, remaining.length - m[0].length);\n    }\n\n    while (remaining.length > 0) {\n      if (m = remaining.match(/^[^\\n]+/)) {\n        this._writeLine(m[0]);\n\n        remaining = remaining.substr(m[0].length, remaining.length);\n      } else if (m = remaining.match(/^\\n+/)) {\n        for (i = k = 1, ref1 = m[0].length; 1 <= ref1 ? k < ref1 : k > ref1; i = 1 <= ref1 ? ++k : --k) {\n          this._writeLine('');\n        }\n\n        remaining = remaining.substr(m[0].length, remaining.length);\n      }\n    }\n\n    if (lineBreaksToAppend > 0) {\n      for (i = l = 1, ref2 = lineBreaksToAppend; 1 <= ref2 ? l <= ref2 : l >= ref2; i = 1 <= ref2 ? ++l : --l) {\n        this._writeLine('');\n      }\n    }\n  };\n\n  Block.prototype._writeLine = function (str) {\n    var line, lineContent, lineContentLength, remaining, roomLeft, toAppend, toAppendLength, toPrepend, toPrependLength;\n    remaining = SpecialString(str);\n\n    while (true) {\n      toPrepend = this._toPrependToLine();\n      toPrependLength = SpecialString(toPrepend).length;\n      toAppend = this._toAppendToLine();\n      toAppendLength = SpecialString(toAppend).length;\n      roomLeft = this._layout._config.terminalWidth - (toPrependLength + toAppendLength);\n      lineContentLength = Math.min(this._config.width, roomLeft);\n      lineContent = remaining.cut(0, lineContentLength, true);\n      line = toPrepend + lineContent.str + toAppend;\n\n      this._layout._appendLine(line);\n\n      if (remaining.isEmpty()) {\n        break;\n      }\n    }\n  };\n\n  return Block;\n}();","map":null,"metadata":{},"sourceType":"script"}