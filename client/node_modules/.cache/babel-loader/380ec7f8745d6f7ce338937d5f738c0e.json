{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n/* istanbul ignore next */\n\n\nvar LCHOWN = fs.lchown ? 'lchown' : 'chown';\n/* istanbul ignore next */\n\nvar LCHOWNSYNC = fs.lchownSync ? 'lchownSync' : 'chownSync'; // fs.readdir could only accept an options object as of node v6\n\nvar nodeVersion = process.version;\n\nvar readdir = function readdir(path, options, cb) {\n  return fs.readdir(path, options, cb);\n};\n\nvar readdirSync = function readdirSync(path, options) {\n  return fs.readdirSync(path, options);\n};\n/* istanbul ignore next */\n\n\nif (/^v4\\./.test(nodeVersion)) readdir = function readdir(path, options, cb) {\n  return fs.readdir(path, cb);\n};\n\nvar chownrKid = function chownrKid(p, child, uid, gid, cb) {\n  if (typeof child === 'string') return fs.lstat(path.resolve(p, child), function (er, stats) {\n    if (er) return cb(er);\n    stats.name = child;\n    chownrKid(p, stats, uid, gid, cb);\n  });\n\n  if (child.isDirectory()) {\n    chownr(path.resolve(p, child.name), uid, gid, function (er) {\n      if (er) return cb(er);\n      fs[LCHOWN](path.resolve(p, child.name), uid, gid, cb);\n    });\n  } else fs[LCHOWN](path.resolve(p, child.name), uid, gid, cb);\n};\n\nvar chownr = function chownr(p, uid, gid, cb) {\n  readdir(p, {\n    withFileTypes: true\n  }, function (er, children) {\n    // any error other than ENOTDIR or ENOTSUP means it's not readable,\n    // or doesn't exist.  give up.\n    if (er && er.code !== 'ENOTDIR' && er.code !== 'ENOTSUP') return cb(er);\n    if (er || !children.length) return fs[LCHOWN](p, uid, gid, cb);\n    var len = children.length;\n    var errState = null;\n\n    var then = function then(er) {\n      if (errState) return;\n      if (er) return cb(errState = er);\n      if (--len === 0) return fs[LCHOWN](p, uid, gid, cb);\n    };\n\n    children.forEach(function (child) {\n      return chownrKid(p, child, uid, gid, then);\n    });\n  });\n};\n\nvar chownrKidSync = function chownrKidSync(p, child, uid, gid) {\n  if (typeof child === 'string') {\n    var stats = fs.lstatSync(path.resolve(p, child));\n    stats.name = child;\n    child = stats;\n  }\n\n  if (child.isDirectory()) chownrSync(path.resolve(p, child.name), uid, gid);\n  fs[LCHOWNSYNC](path.resolve(p, child.name), uid, gid);\n};\n\nvar chownrSync = function chownrSync(p, uid, gid) {\n  var children;\n\n  try {\n    children = readdirSync(p, {\n      withFileTypes: true\n    });\n  } catch (er) {\n    if (er && er.code === 'ENOTDIR' && er.code !== 'ENOTSUP') return fs[LCHOWNSYNC](p, uid, gid);\n    throw er;\n  }\n\n  if (children.length) children.forEach(function (child) {\n    return chownrKidSync(p, child, uid, gid);\n  });\n  return fs[LCHOWNSYNC](p, uid, gid);\n};\n\nmodule.exports = chownr;\nchownr.sync = chownrSync;","map":null,"metadata":{},"sourceType":"script"}