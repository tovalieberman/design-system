{"ast":null,"code":"// @ts-check\n\n/* eslint-disable */\n/// <reference path=\"../typings.d.ts\" />\n\n/* eslint-enable */\n\n/**\n * @file\n * This file provides to helper to create html as a object repesentation as\n * thoses objects are easier to modify than pure string representations\n *\n * Usage:\n * ```\n * const element = createHtmlTagObject('h1', {class: 'demo'}, 'Hello World');\n * const html = htmlTagObjectToString(element);\n * console.log(html) // -> <h1 class=\"demo\">Hello World</h1>\n * ```\n */\n\n/**\n * All html tag elements which must not contain innerHTML\n * @see https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nvar voidTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];\n/**\n * Turn a tag definition into a html string\n * @param {HtmlTagObject} tagDefinition\n *  A tag element according to the htmlWebpackPlugin object notation\n *\n * @param xhtml {boolean}\n *   Wether the generated html should add closing slashes to be xhtml compliant\n */\n\nfunction htmlTagObjectToString(tagDefinition, xhtml) {\n  var attributes = Object.keys(tagDefinition.attributes || {}).filter(function (attributeName) {\n    return tagDefinition.attributes[attributeName] !== false;\n  }).map(function (attributeName) {\n    if (tagDefinition.attributes[attributeName] === true) {\n      return xhtml ? attributeName + '=\"' + attributeName + '\"' : attributeName;\n    }\n\n    return attributeName + '=\"' + tagDefinition.attributes[attributeName] + '\"';\n  });\n  return '<' + [tagDefinition.tagName].concat(attributes).join(' ') + (tagDefinition.voidTag && xhtml ? '/' : '') + '>' + (tagDefinition.innerHTML || '') + (tagDefinition.voidTag ? '' : '</' + tagDefinition.tagName + '>');\n}\n/**\n * Static helper to create a tag object to be get injected into the dom\n *\n * @param {string} tagName\n * the name of the tage e.g. 'div'\n *\n * @param {{[attributeName: string]: string|boolean}} [attributes]\n * tag attributes e.g. `{ 'class': 'example', disabled: true }`\n *\n * @param {string} [innerHTML]\n *\n * @returns {HtmlTagObject}\n */\n\n\nfunction createHtmlTagObject(tagName, attributes, innerHTML) {\n  return {\n    tagName: tagName,\n    voidTag: voidTags.indexOf(tagName) !== -1,\n    attributes: attributes || {},\n    innerHTML: innerHTML\n  };\n}\n\nmodule.exports = {\n  createHtmlTagObject: createHtmlTagObject,\n  htmlTagObjectToString: htmlTagObjectToString\n};","map":null,"metadata":{},"sourceType":"script"}