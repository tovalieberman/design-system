{"ast":null,"code":"(function () {\n  var fnNameMatchRegex = /^\\s*function(?:\\s|\\s*\\/\\*.*\\*\\/\\s*)+([^\\(\\s\\/]*)\\s*/;\n\n  function _name() {\n    var match, name;\n\n    if (this === Function || this === Function.prototype.constructor) {\n      name = \"Function\";\n    } else if (this !== Function.prototype) {\n      match = (\"\" + this).match(fnNameMatchRegex);\n      name = match && match[1];\n    }\n\n    return name || \"\";\n  } // Inspect the polyfill-ability of this browser\n\n\n  var needsPolyfill = !(\"name\" in Function.prototype && \"name\" in function x() {});\n\n  var canDefineProp = typeof Object.defineProperty === \"function\" && function () {\n    var result;\n\n    try {\n      Object.defineProperty(Function.prototype, \"_xyz\", {\n        get: function get() {\n          return \"blah\";\n        },\n        configurable: true\n      });\n      result = Function.prototype._xyz === \"blah\";\n      delete Function.prototype._xyz;\n    } catch (e) {\n      result = false;\n    }\n\n    return result;\n  }();\n\n  var canDefineGetter = typeof Object.prototype.__defineGetter__ === \"function\" && function () {\n    var result;\n\n    try {\n      Function.prototype.__defineGetter__(\"_abc\", function () {\n        return \"foo\";\n      });\n\n      result = Function.prototype._abc === \"foo\";\n      delete Function.prototype._abc;\n    } catch (e) {\n      result = false;\n    }\n\n    return result;\n  }(); // Add the \"private\" property for testing, even if the real property can be polyfilled\n\n\n  Function.prototype._name = _name; // Polyfill it!\n  // For:\n  //  * IE >=9 <12\n  //  * Chrome <33\n\n  if (needsPolyfill) {\n    // For:\n    //  * IE >=9 <12\n    //  * Chrome >=5 <33\n    if (canDefineProp) {\n      Object.defineProperty(Function.prototype, \"name\", {\n        get: function get() {\n          var name = _name.call(this); // Since named function definitions have immutable names, also memoize the\n          // output by defining the `name` property directly on this Function\n          // instance so that this polyfill will not need to be invoked again\n\n\n          if (this !== Function.prototype) {\n            Object.defineProperty(this, \"name\", {\n              value: name,\n              configurable: true\n            });\n          }\n\n          return name;\n        },\n        configurable: true\n      });\n    } // For:\n    //  * Chrome <5\n    else if (canDefineGetter) {\n        // NOTE:\n        // The snippet:\n        //\n        //     x.__defineGetter__('y', z);\n        //\n        // ...is essentially equivalent to:\n        //\n        //     Object.defineProperty(x, 'y', {\n        //       get: z,\n        //       configurable: true,  // <-- key difference #1\n        //       enumerable: true     // <-- key difference #2\n        //     });\n        //\n        Function.prototype.__defineGetter__(\"name\", function () {\n          var name = _name.call(this); // Since named function definitions have immutable names, also memoize the\n          // output by defining the `name` property directly on this Function\n          // instance so that this polyfill will not need to be invoked again\n\n\n          if (this !== Function.prototype) {\n            this.__defineGetter__(\"name\", function () {\n              return name;\n            });\n          }\n\n          return name;\n        });\n      }\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}