{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.replace\";\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport PlaygroundError from 'rsg-components/PlaygroundError';\nimport ReactExample from 'rsg-components/ReactExample';\nimport Context from 'rsg-components/Context';\n\nvar improveErrorMessage = function improveErrorMessage(message) {\n  return message.replace('Check the render method of `StateHolder`.', 'Check the code of your example in a Markdown file or in the editor below.');\n};\n\nvar Preview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Preview, _Component);\n\n  function Preview() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      error: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleError\", function (err) {\n      _this.unmountPreview();\n\n      _this.setState({\n        error: improveErrorMessage(err.toString())\n      });\n\n      console.error(err); // eslint-disable-line no-console\n    });\n\n    return _this;\n  }\n\n  var _proto = Preview.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Clear console after hot reload, do not clear on the first load\n    // to keep any warnings\n    if (this.context.codeRevision > 0) {\n      // eslint-disable-next-line no-console\n      console.clear();\n    }\n\n    this.executeCode();\n  };\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    return this.state.error !== nextState.error || this.props.code !== nextProps.code;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.code !== prevProps.code) {\n      this.executeCode();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unmountPreview();\n  };\n\n  _proto.unmountPreview = function unmountPreview() {\n    if (this.mountNode) {\n      ReactDOM.unmountComponentAtNode(this.mountNode);\n    }\n  };\n\n  _proto.executeCode = function executeCode() {\n    var _this2 = this;\n\n    this.setState({\n      error: null\n    });\n    var code = this.props.code;\n\n    if (!code) {\n      return;\n    }\n\n    var wrappedComponent = React.createElement(ReactExample, {\n      code: code,\n      evalInContext: this.props.evalInContext,\n      onError: this.handleError,\n      compilerConfig: this.context.config.compilerConfig\n    });\n    window.requestAnimationFrame(function () {\n      // this.unmountPreview();\n      try {\n        ReactDOM.render(wrappedComponent, _this2.mountNode);\n      } catch (err) {\n        _this2.handleError(err);\n      }\n    });\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var error = this.state.error;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      \"data-testid\": \"mountNode\",\n      ref: function ref(_ref) {\n        return _this3.mountNode = _ref;\n      }\n    }), error && React.createElement(PlaygroundError, {\n      message: error\n    }));\n  };\n\n  return Preview;\n}(Component);\n\n_defineProperty(Preview, \"propTypes\", {\n  code: PropTypes.string.isRequired,\n  evalInContext: PropTypes.func.isRequired\n});\n\n_defineProperty(Preview, \"contextType\", Context);\n\nexport { Preview as default };","map":null,"metadata":{},"sourceType":"module"}