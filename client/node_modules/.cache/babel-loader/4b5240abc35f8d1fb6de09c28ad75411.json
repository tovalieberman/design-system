{"ast":null,"code":"\"use strict\";\n\nvar constants = require(\"./constants\");\n\nvar formatUrl = require(\"./format\");\n\nvar getOptions = require(\"./options\");\n\nvar objUtils = require(\"./util/object\");\n\nvar parseUrl = require(\"./parse\");\n\nvar relateUrl = require(\"./relate\");\n\nfunction RelateUrl(from, options) {\n  this.options = getOptions(options, {\n    defaultPorts: {\n      ftp: 21,\n      http: 80,\n      https: 443\n    },\n    directoryIndexes: [\"index.html\"],\n    ignore_www: false,\n    output: RelateUrl.SHORTEST,\n    rejectedSchemes: [\"data\", \"javascript\", \"mailto\"],\n    removeAuth: false,\n    removeDirectoryIndexes: true,\n    removeEmptyQueries: false,\n    removeRootTrailingSlash: true,\n    schemeRelative: true,\n    site: undefined,\n    slashesDenoteHost: true\n  });\n  this.from = parseUrl.from(from, this.options, null);\n}\n/*\n\tUsage: instance=new RelateUrl(); instance.relate();\n*/\n\n\nRelateUrl.prototype.relate = function (from, to, options) {\n  // relate(to,options)\n  if (objUtils.isPlainObject(to)) {\n    options = to;\n    to = from;\n    from = null;\n  } // relate(to)\n  else if (!to) {\n      to = from;\n      from = null;\n    }\n\n  options = getOptions(options, this.options);\n  from = from || options.site;\n  from = parseUrl.from(from, options, this.from);\n\n  if (!from || !from.href) {\n    throw new Error(\"from value not defined.\");\n  } else if (from.extra.hrefInfo.minimumPathOnly) {\n    throw new Error(\"from value supplied is not absolute: \" + from.href);\n  }\n\n  to = parseUrl.to(to, options);\n  if (to.valid === false) return to.href;\n  to = relateUrl(from, to, options);\n  to = formatUrl(to, options);\n  return to;\n};\n/*\n\tUsage: RelateUrl.relate();\n*/\n\n\nRelateUrl.relate = function (from, to, options) {\n  return new RelateUrl().relate(from, to, options);\n}; // Make constants accessible from API\n\n\nobjUtils.shallowMerge(RelateUrl, constants);\nmodule.exports = RelateUrl;","map":null,"metadata":{},"sourceType":"script"}