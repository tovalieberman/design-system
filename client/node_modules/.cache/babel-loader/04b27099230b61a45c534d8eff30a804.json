{"ast":null,"code":"'use strict'; // we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash\n\nvar matchNativeWin32Path = /^[A-Z]:[/\\\\]|^\\\\\\\\/i;\n\nfunction urlToRequest(url, root) {\n  // Do not rewrite an empty url\n  if (url === '') {\n    return '';\n  }\n\n  var moduleRequestRegex = /^[^?]*~/;\n  var request;\n\n  if (matchNativeWin32Path.test(url)) {\n    // absolute windows path, keep it\n    request = url;\n  } else if (root !== undefined && root !== false && /^\\//.test(url)) {\n    // if root is set and the url is root-relative\n    switch (typeof root) {\n      // 1. root is a string: root is prefixed to the url\n      case 'string':\n        // special case: `~` roots convert to module request\n        if (moduleRequestRegex.test(root)) {\n          request = root.replace(/([^~/])$/, '$1/') + url.slice(1);\n        } else {\n          request = root + url;\n        }\n\n        break;\n      // 2. root is `true`: absolute paths are allowed\n      //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`\n\n      case 'boolean':\n        request = url;\n        break;\n\n      default:\n        throw new Error(\"Unexpected parameters to loader-utils 'urlToRequest': url = \" + url + ', root = ' + root + '.');\n    }\n  } else if (/^\\.\\.?\\//.test(url)) {\n    // A relative url stays\n    request = url;\n  } else {\n    // every other url is threaded like a relative url\n    request = './' + url;\n  } // A `~` makes the url an module\n\n\n  if (moduleRequestRegex.test(request)) {\n    request = request.replace(moduleRequestRegex, '');\n  }\n\n  return request;\n}\n\nmodule.exports = urlToRequest;","map":null,"metadata":{},"sourceType":"script"}