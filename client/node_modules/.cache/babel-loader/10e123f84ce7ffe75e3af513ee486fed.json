{"ast":null,"code":"\"use strict\";\n\nvar _parseUrl = require(\"url\").parse;\n/*\n\tCustomize the URL object that Node generates\n\tbecause:\n\t\n\t* necessary data for later\n\t* urlObj.host is useless\n\t* urlObj.hostname is too long\n\t* urlObj.path is useless\n\t* urlObj.pathname is too long\n\t* urlObj.protocol is inaccurate; should be called \"scheme\"\n\t* urlObj.search is mostly useless\n*/\n\n\nfunction clean(urlObj) {\n  var scheme = urlObj.protocol;\n\n  if (scheme) {\n    // Remove \":\" suffix\n    if (scheme.indexOf(\":\") === scheme.length - 1) {\n      scheme = scheme.substr(0, scheme.length - 1);\n    }\n  }\n\n  urlObj.host = {\n    // TODO :: unescape(encodeURIComponent(s)) ? ... http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html\n    full: urlObj.hostname,\n    stripped: null\n  };\n  urlObj.path = {\n    absolute: {\n      array: null,\n      string: urlObj.pathname\n    },\n    relative: {\n      array: null,\n      string: null\n    }\n  };\n  urlObj.query = {\n    object: urlObj.query,\n    string: {\n      full: null,\n      stripped: null\n    }\n  };\n  urlObj.extra = {\n    hrefInfo: {\n      minimumPathOnly: null,\n      minimumResourceOnly: null,\n      minimumQueryOnly: null,\n      minimumHashOnly: null,\n      empty: null,\n      separatorOnlyQuery: urlObj.search === \"?\"\n    },\n    portIsDefault: null,\n    relation: {\n      maximumScheme: null,\n      maximumAuth: null,\n      maximumHost: null,\n      maximumPort: null,\n      maximumPath: null,\n      maximumResource: null,\n      maximumQuery: null,\n      maximumHash: null,\n      minimumScheme: null,\n      minimumAuth: null,\n      minimumHost: null,\n      minimumPort: null,\n      minimumPath: null,\n      minimumResource: null,\n      minimumQuery: null,\n      minimumHash: null,\n      overridesQuery: null\n    },\n    resourceIsIndex: null,\n    slashes: urlObj.slashes\n  };\n  urlObj.resource = null;\n  urlObj.scheme = scheme;\n  delete urlObj.hostname;\n  delete urlObj.pathname;\n  delete urlObj.protocol;\n  delete urlObj.search;\n  delete urlObj.slashes;\n  return urlObj;\n}\n\nfunction validScheme(url, options) {\n  var valid = true;\n  options.rejectedSchemes.every(function (rejectedScheme) {\n    valid = !(url.indexOf(rejectedScheme + \":\") === 0); // Break loop\n\n    return valid;\n  });\n  return valid;\n}\n\nfunction parseUrlString(url, options) {\n  if (validScheme(url, options)) {\n    return clean(_parseUrl(url, true, options.slashesDenoteHost));\n  } else {\n    return {\n      href: url,\n      valid: false\n    };\n  }\n}\n\nmodule.exports = parseUrlString;","map":null,"metadata":{},"sourceType":"script"}