{"ast":null,"code":"var systemLineBreak = require('os').EOL;\n\nvar override = require('../utils/override');\n\nvar Breaks = {\n  AfterAtRule: 'afterAtRule',\n  AfterBlockBegins: 'afterBlockBegins',\n  AfterBlockEnds: 'afterBlockEnds',\n  AfterComment: 'afterComment',\n  AfterProperty: 'afterProperty',\n  AfterRuleBegins: 'afterRuleBegins',\n  AfterRuleEnds: 'afterRuleEnds',\n  BeforeBlockEnds: 'beforeBlockEnds',\n  BetweenSelectors: 'betweenSelectors'\n};\nvar BreakWith = {\n  CarriageReturnLineFeed: '\\r\\n',\n  LineFeed: '\\n',\n  System: systemLineBreak\n};\nvar IndentWith = {\n  Space: ' ',\n  Tab: '\\t'\n};\nvar Spaces = {\n  AroundSelectorRelation: 'aroundSelectorRelation',\n  BeforeBlockBegins: 'beforeBlockBegins',\n  BeforeValue: 'beforeValue'\n};\nvar DEFAULTS = {\n  breaks: breaks(false),\n  breakWith: BreakWith.System,\n  indentBy: 0,\n  indentWith: IndentWith.Space,\n  spaces: spaces(false),\n  wrapAt: false,\n  semicolonAfterLastProperty: false\n};\nvar BEAUTIFY_ALIAS = 'beautify';\nvar KEEP_BREAKS_ALIAS = 'keep-breaks';\nvar OPTION_SEPARATOR = ';';\nvar OPTION_NAME_VALUE_SEPARATOR = ':';\nvar HASH_VALUES_OPTION_SEPARATOR = ',';\nvar HASH_VALUES_NAME_VALUE_SEPARATOR = '=';\nvar FALSE_KEYWORD_1 = 'false';\nvar FALSE_KEYWORD_2 = 'off';\nvar TRUE_KEYWORD_1 = 'true';\nvar TRUE_KEYWORD_2 = 'on';\n\nfunction breaks(value) {\n  var breakOptions = {};\n  breakOptions[Breaks.AfterAtRule] = value;\n  breakOptions[Breaks.AfterBlockBegins] = value;\n  breakOptions[Breaks.AfterBlockEnds] = value;\n  breakOptions[Breaks.AfterComment] = value;\n  breakOptions[Breaks.AfterProperty] = value;\n  breakOptions[Breaks.AfterRuleBegins] = value;\n  breakOptions[Breaks.AfterRuleEnds] = value;\n  breakOptions[Breaks.BeforeBlockEnds] = value;\n  breakOptions[Breaks.BetweenSelectors] = value;\n  return breakOptions;\n}\n\nfunction spaces(value) {\n  var spaceOptions = {};\n  spaceOptions[Spaces.AroundSelectorRelation] = value;\n  spaceOptions[Spaces.BeforeBlockBegins] = value;\n  spaceOptions[Spaces.BeforeValue] = value;\n  return spaceOptions;\n}\n\nfunction formatFrom(source) {\n  if (source === undefined || source === false) {\n    return false;\n  }\n\n  if (typeof source == 'object' && 'breakWith' in source) {\n    source = override(source, {\n      breakWith: mapBreakWith(source.breakWith)\n    });\n  }\n\n  if (typeof source == 'object' && 'indentBy' in source) {\n    source = override(source, {\n      indentBy: parseInt(source.indentBy)\n    });\n  }\n\n  if (typeof source == 'object' && 'indentWith' in source) {\n    source = override(source, {\n      indentWith: mapIndentWith(source.indentWith)\n    });\n  }\n\n  if (typeof source == 'object') {\n    return override(DEFAULTS, source);\n  }\n\n  if (typeof source == 'object') {\n    return override(DEFAULTS, source);\n  }\n\n  if (typeof source == 'string' && source == BEAUTIFY_ALIAS) {\n    return override(DEFAULTS, {\n      breaks: breaks(true),\n      indentBy: 2,\n      spaces: spaces(true)\n    });\n  }\n\n  if (typeof source == 'string' && source == KEEP_BREAKS_ALIAS) {\n    return override(DEFAULTS, {\n      breaks: {\n        afterAtRule: true,\n        afterBlockBegins: true,\n        afterBlockEnds: true,\n        afterComment: true,\n        afterRuleEnds: true,\n        beforeBlockEnds: true\n      }\n    });\n  }\n\n  if (typeof source == 'string') {\n    return override(DEFAULTS, toHash(source));\n  }\n\n  return DEFAULTS;\n}\n\nfunction toHash(string) {\n  return string.split(OPTION_SEPARATOR).reduce(function (accumulator, directive) {\n    var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);\n    var name = parts[0];\n    var value = parts[1];\n\n    if (name == 'breaks' || name == 'spaces') {\n      accumulator[name] = hashValuesToHash(value);\n    } else if (name == 'indentBy' || name == 'wrapAt') {\n      accumulator[name] = parseInt(value);\n    } else if (name == 'indentWith') {\n      accumulator[name] = mapIndentWith(value);\n    } else if (name == 'breakWith') {\n      accumulator[name] = mapBreakWith(value);\n    }\n\n    return accumulator;\n  }, {});\n}\n\nfunction hashValuesToHash(string) {\n  return string.split(HASH_VALUES_OPTION_SEPARATOR).reduce(function (accumulator, directive) {\n    var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);\n    var name = parts[0];\n    var value = parts[1];\n    accumulator[name] = normalizeValue(value);\n    return accumulator;\n  }, {});\n}\n\nfunction normalizeValue(value) {\n  switch (value) {\n    case FALSE_KEYWORD_1:\n    case FALSE_KEYWORD_2:\n      return false;\n\n    case TRUE_KEYWORD_1:\n    case TRUE_KEYWORD_2:\n      return true;\n\n    default:\n      return value;\n  }\n}\n\nfunction mapBreakWith(value) {\n  switch (value) {\n    case 'windows':\n    case 'crlf':\n    case BreakWith.CarriageReturnLineFeed:\n      return BreakWith.CarriageReturnLineFeed;\n\n    case 'unix':\n    case 'lf':\n    case BreakWith.LineFeed:\n      return BreakWith.LineFeed;\n\n    default:\n      return systemLineBreak;\n  }\n}\n\nfunction mapIndentWith(value) {\n  switch (value) {\n    case 'space':\n      return IndentWith.Space;\n\n    case 'tab':\n      return IndentWith.Tab;\n\n    default:\n      return value;\n  }\n}\n\nmodule.exports = {\n  Breaks: Breaks,\n  Spaces: Spaces,\n  formatFrom: formatFrom\n};","map":null,"metadata":{},"sourceType":"script"}