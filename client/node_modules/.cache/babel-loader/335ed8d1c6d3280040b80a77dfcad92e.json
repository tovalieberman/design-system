{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports['default'] = jssIsolate;\n\nvar _inherited = require('css-initials/inherited');\n\nvar _inherited2 = _interopRequireDefault(_inherited);\n\nvar _all = require('css-initials/all');\n\nvar _all2 = _interopRequireDefault(_all);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar resetSheetOptions = {\n  meta: 'jss-isolate',\n  // Lets make it always the first one in sheets for testing\n  // and specificity.\n  index: -Infinity,\n  link: true\n};\nvar initialsMap = {\n  inherited: _inherited2['default'],\n  all: _all2['default']\n};\n\nvar getStyle = function getStyle() {\n  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'inherited'; // Option is either \"inherited\" or \"all\".\n\n  if (typeof option === 'string') return initialsMap[option];\n\n  if ((typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object') {\n    // Option is [\"all/inherited\", {...style}]\n    if (Array.isArray(option)) {\n      var type = option[0];\n      var style = option[1];\n      return _extends({}, initialsMap[type], style);\n    } // Option is a style object, use inherited initials by default.\n\n\n    return _extends({}, _inherited2['default'], option);\n  }\n\n  return _inherited2['default'];\n};\n\nvar ignoreParents = {\n  keyframes: true,\n  conditional: true\n};\n\nvar shouldIsolate = function shouldIsolate(rule, sheet, options) {\n  var parent = rule.options.parent;\n\n  if (parent && ignoreParents[parent.type]) {\n    return false;\n  }\n\n  var isolate = options.isolate == null ? true : options.isolate;\n  if (sheet.options.isolate != null) isolate = sheet.options.isolate;\n\n  if (rule.style.isolate != null) {\n    isolate = rule.style.isolate;\n    delete rule.style.isolate;\n  } // Option `isolate` may be for e.g. `{isolate: 'root'}`.\n  // In this case it must match the rule name in order to isolate it.\n\n\n  if (typeof isolate === 'string') {\n    return isolate === rule.key;\n  }\n\n  return isolate;\n};\n/**\n * Performance optimized debounce without using setTimeout.\n * Returns a function which:\n * - will execute the passed fn not more than once per delay\n * - will not execute the passed fn if last try was within delay\n */\n\n\nvar createDebounced = function createDebounced(fn) {\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var time = Date.now();\n  return function () {\n    var now = Date.now();\n    if (now - time < delay) return false;\n    time = now;\n    fn();\n    return true;\n  };\n};\n\nfunction jssIsolate() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var setSelectorDone = false;\n  var selectors = [];\n  var resetSheet = void 0;\n  var resetRule = void 0;\n\n  var setSelector = function setSelector() {\n    resetRule.selector = selectors.join(',\\n');\n  };\n\n  var setSelectorDebounced = createDebounced(setSelector);\n\n  function onProcessRule(rule, sheet) {\n    if (!sheet || sheet === resetSheet || rule.type !== 'style') return;\n    if (!shouldIsolate(rule, sheet, options)) return; // Create a reset Style Sheet once and use it for all rules.\n\n    if (!resetRule) {\n      resetSheet = rule.options.jss.createStyleSheet(null, resetSheetOptions);\n      resetRule = resetSheet.addRule('reset', getStyle(options.reset));\n      resetSheet.attach();\n    } // Add reset rule class name to the classes map of users Style Sheet.\n\n\n    var selector = rule.selector;\n\n    if (selectors.indexOf(selector) === -1) {\n      selectors.push(selector);\n      setSelectorDone = setSelectorDebounced();\n    }\n  } // We make sure selector is set, because `debaunceMaybe` will not execute\n  // the fn if called within delay.\n\n\n  function onProcessSheet() {\n    if (!setSelectorDone && selectors.length) setSelector();\n  }\n\n  return {\n    onProcessRule: onProcessRule,\n    onProcessSheet: onProcessSheet\n  };\n}","map":null,"metadata":{},"sourceType":"script"}