{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar Block, Layout, SpecialString, fn, i, len, object, prop, ref, terminalWidth;\nBlock = require('./layout/Block');\nobject = require('utila').object;\nSpecialString = require('./layout/SpecialString');\nterminalWidth = require('./tools').getCols();\n\nmodule.exports = Layout = function () {\n  var self;\n  self = Layout;\n  Layout._rootBlockDefaultConfig = {\n    linePrependor: {\n      options: {\n        amount: 0\n      }\n    },\n    lineAppendor: {\n      options: {\n        amount: 0\n      }\n    },\n    blockPrependor: {\n      options: {\n        amount: 0\n      }\n    },\n    blockAppendor: {\n      options: {\n        amount: 0\n      }\n    }\n  };\n  Layout._defaultConfig = {\n    terminalWidth: terminalWidth\n  };\n\n  function Layout(config, rootBlockConfig) {\n    var rootConfig;\n\n    if (config == null) {\n      config = {};\n    }\n\n    if (rootBlockConfig == null) {\n      rootBlockConfig = {};\n    }\n\n    this._written = [];\n    this._activeBlock = null;\n    this._config = object.append(self._defaultConfig, config);\n    rootConfig = object.append(self._rootBlockDefaultConfig, rootBlockConfig);\n    this._root = new Block(this, null, rootConfig, '__root');\n\n    this._root._open();\n  }\n\n  Layout.prototype.getRootBlock = function () {\n    return this._root;\n  };\n\n  Layout.prototype._append = function (text) {\n    return this._written.push(text);\n  };\n\n  Layout.prototype._appendLine = function (text) {\n    var s;\n\n    this._append(text);\n\n    s = SpecialString(text);\n\n    if (s.length < this._config.terminalWidth) {\n      this._append('<none>\\n</none>');\n    }\n\n    return this;\n  };\n\n  Layout.prototype.get = function () {\n    this._ensureClosed();\n\n    if (this._written[this._written.length - 1] === '<none>\\n</none>') {\n      this._written.pop();\n    }\n\n    return this._written.join(\"\");\n  };\n\n  Layout.prototype._ensureClosed = function () {\n    if (this._activeBlock !== this._root) {\n      throw Error(\"Not all the blocks have been closed. Please call block.close() on all open blocks.\");\n    }\n\n    if (this._root.isOpen()) {\n      this._root.close();\n    }\n  };\n\n  return Layout;\n}();\n\nref = ['openBlock', 'write'];\n\nfn = function fn() {\n  var method;\n  method = prop;\n  return Layout.prototype[method] = function () {\n    return this._root[method].apply(this._root, arguments);\n  };\n};\n\nfor (i = 0, len = ref.length; i < len; i++) {\n  prop = ref[i];\n  fn();\n}","map":null,"metadata":{},"sourceType":"script"}