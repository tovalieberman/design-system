{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.keys\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // Inspired by https://github.com/camwest/react-slot-fill\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStyleGuideContext } from 'rsg-components/Context';\nexport default function Slot(_ref) {\n  var name = _ref.name,\n      active = _ref.active,\n      onlyActive = _ref.onlyActive,\n      className = _ref.className,\n      _ref$props = _ref.props,\n      props = _ref$props === void 0 ? {} : _ref$props;\n\n  var _useStyleGuideContext = useStyleGuideContext(),\n      slots = _useStyleGuideContext.slots;\n\n  var fills = slots[name];\n\n  if (!fills) {\n    throw new Error(\"Slot \\\"\" + name + \"\\\" not found, available slots: \" + Object.keys(slots).join(', '));\n  }\n\n  var rendered = fills.map(function (Fill, index) {\n    // { id: 'pizza', render: ({ foo }) => <div>{foo}</div> }\n    var _Fill = Fill,\n        id = _Fill.id,\n        render = _Fill.render;\n    var fillProps = props;\n\n    if (id && render) {\n      // Render only specified fill\n      if (onlyActive && id !== active) {\n        return null;\n      } // eslint-disable-next-line react/prop-types\n\n\n      var onClick = props.onClick;\n      fillProps = Object.assign({}, props, {\n        name: id,\n        // Set active prop to active fill\n        active: active ? id === active : undefined,\n        // Pass fill ID to onClick event handler\n        onClick: onClick && function () {\n          for (var _len = arguments.length, attrs = new Array(_len), _key = 0; _key < _len; _key++) {\n            attrs[_key] = arguments[_key];\n          }\n\n          return onClick.apply(void 0, [id].concat(attrs));\n        }\n      });\n      Fill = render;\n    }\n\n    return React.createElement(Fill, _extends({\n      key: index\n    }, fillProps));\n  });\n  var filtered = rendered.filter(Boolean);\n\n  if (filtered.length === 0) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    className: className\n  }, filtered);\n}\nSlot.propTypes = {\n  name: PropTypes.string.isRequired,\n  active: PropTypes.string,\n  onlyActive: PropTypes.bool,\n  props: PropTypes.object,\n  className: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}