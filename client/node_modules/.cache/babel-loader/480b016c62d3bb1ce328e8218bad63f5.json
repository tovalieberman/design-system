{"ast":null,"code":"'use strict';\n\nvar ES2015 = require('./es2015');\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar assign = require('./helpers/assign');\n\nvar $setProto = require('./helpers/setProto');\n\nvar callBound = require('./helpers/callBound');\n\nvar getIteratorMethod = require('./helpers/getIteratorMethod');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $arrayPush = callBound('Array.prototype.push');\n\nvar $getProto = require('./helpers/getProto');\n\nvar ES2016 = assign(assign({}, ES2015), {\n  // https://www.ecma-international.org/ecma-262/7.0/#sec-samevaluenonnumber\n  SameValueNonNumber: function SameValueNonNumber(x, y) {\n    if (typeof x === 'number' || typeof x !== typeof y) {\n      throw new TypeError('SameValueNonNumber requires two non-number values of the same type.');\n    }\n\n    return this.SameValue(x, y);\n  },\n  // https://www.ecma-international.org/ecma-262/7.0/#sec-iterabletoarraylike\n  IterableToArrayLike: function IterableToArrayLike(items) {\n    var usingIterator = getIteratorMethod(this, items);\n\n    if (typeof usingIterator !== 'undefined') {\n      var iterator = this.GetIterator(items, usingIterator);\n      var values = [];\n      var next = true;\n\n      while (next) {\n        next = this.IteratorStep(iterator);\n\n        if (next) {\n          var nextValue = this.IteratorValue(next);\n          $arrayPush(values, nextValue);\n        }\n      }\n\n      return values;\n    }\n\n    return this.ToObject(items);\n  },\n  // https://ecma-international.org/ecma-262/7.0/#sec-ordinarygetprototypeof\n  OrdinaryGetPrototypeOf: function OrdinaryGetPrototypeOf(O) {\n    if (this.Type(O) !== 'Object') {\n      throw new $TypeError('Assertion failed: O must be an Object');\n    }\n\n    if (!$getProto) {\n      throw new $TypeError('This environment does not support fetching prototypes.');\n    }\n\n    return $getProto(O);\n  },\n  // https://ecma-international.org/ecma-262/7.0/#sec-ordinarysetprototypeof\n  OrdinarySetPrototypeOf: function OrdinarySetPrototypeOf(O, V) {\n    if (this.Type(V) !== 'Object' && this.Type(V) !== 'Null') {\n      throw new $TypeError('Assertion failed: V must be Object or Null');\n    }\n    /*\n    var extensible = this.IsExtensible(O);\n    var current = this.OrdinaryGetPrototypeOf(O);\n    if (this.SameValue(V, current)) {\n    \treturn true;\n    }\n    if (!extensible) {\n    \treturn false;\n    }\n    */\n\n\n    try {\n      $setProto(O, V);\n    } catch (e) {\n      return false;\n    }\n\n    return this.OrdinaryGetPrototypeOf(O) === V;\n    /*\n    var p = V;\n    var done = false;\n    while (!done) {\n    \tif (p === null) {\n    \t\tdone = true;\n    \t} else if (this.SameValue(p, O)) {\n    \t\treturn false;\n    \t} else {\n    \t\tif (wat) {\n    \t\t\tdone = true;\n    \t\t} else {\n    \t\t\tp = p.[[Prototype]];\n    \t\t}\n    \t}\n     }\n     O.[[Prototype]] = V;\n     return true;\n     */\n  }\n});\nmodule.exports = ES2016;","map":null,"metadata":{},"sourceType":"script"}