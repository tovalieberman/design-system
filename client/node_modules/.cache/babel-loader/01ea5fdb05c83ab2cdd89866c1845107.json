{"ast":null,"code":"import \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.string.split\";\nimport \"core-js/modules/es.string.trim\";\nimport \"core-js/modules/web.dom-collections.for-each\";\n// Temporary copy to fix\n// https://github.com/lukeed/rewrite-imports/issues/10\nvar UNNAMED = /import\\s*['\"]([^'\"]+)['\"];?/gi;\nvar NAMED = /import\\s*(\\*\\s*as)?\\s*(\\w*?)\\s*,?\\s*(?:\\{([\\s\\S]*?)\\})?\\s*from\\s*['\"]([^'\"]+)['\"];?/gi;\n\nfunction alias(key) {\n  key = key.trim();\n  var name = key.split(' as ');\n\n  if (name.length > 1) {\n    key = name.shift();\n  }\n\n  return {\n    key: key,\n    name: name[0]\n  };\n}\n\nfunction generate(keys, dep, base, fn) {\n  var tmp = dep.split('/').pop().replace(/\\W/g, '_') + '$' + num++; // uniqueness\n\n  var name = alias(tmp).name;\n  dep = fn + \"('\" + dep + \"')\";\n  var obj;\n  var out = \"const \" + name + \" = \" + dep + \";\";\n\n  if (base) {\n    out += \"\\nconst \" + base + \" = \" + tmp + \".default || \" + tmp + \";\";\n  }\n\n  keys.forEach(function (key) {\n    obj = alias(key);\n    out += \"\\nconst \" + obj.name + \" = \" + tmp + \".\" + obj.key + \";\";\n  });\n  return out;\n}\n\nvar num;\nexport default function (str, fn) {\n  if (fn === void 0) {\n    fn = 'require';\n  }\n\n  num = 0;\n  return str.replace(NAMED, function (_, asterisk, base, req, dep) {\n    return generate(req ? req.split(',').filter(function (d) {\n      return d.trim();\n    }) : [], dep, base, fn);\n  }).replace(UNNAMED, function (_, dep) {\n    return fn + \"('\" + dep + \"');\";\n  });\n}","map":null,"metadata":{},"sourceType":"module"}