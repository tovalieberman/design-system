{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Match all characters that need to be escaped in a string. Modified from\n * source to match single quotes instead of double.\n *\n * Source: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n */\n\nvar ESCAPABLE = /[\\\\\\'\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n/**\n * Map of characters to escape characters.\n */\n\nvar META_CHARS = new Map([[\"\\b\", \"\\\\b\"], [\"\\t\", \"\\\\t\"], [\"\\n\", \"\\\\n\"], [\"\\f\", \"\\\\f\"], [\"\\r\", \"\\\\r\"], [\"'\", \"\\\\'\"], ['\"', '\\\\\"'], [\"\\\\\", \"\\\\\\\\\"]]);\n/**\n * Escape any character into its literal JavaScript string.\n *\n * @param  {string} char\n * @return {string}\n */\n\nfunction escapeChar(char) {\n  return META_CHARS.get(char) || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(16)).slice(-4));\n}\n/**\n * Quote a string.\n */\n\n\nfunction quoteString(str) {\n  return \"'\".concat(str.replace(ESCAPABLE, escapeChar), \"'\");\n}\n\nexports.quoteString = quoteString;\n/**\n * JavaScript reserved keywords.\n */\n\nvar RESERVED_WORDS = new Set((\"break else new var case finally return void catch for switch while \" + \"continue function this with default if throw delete in try \" + \"do instanceof typeof abstract enum int short boolean export \" + \"interface static byte extends long super char final native synchronized \" + \"class float package throws const goto private transient debugger \" + \"implements protected volatile double import public let yield\").split(\" \"));\n/**\n * Test for valid JavaScript identifier.\n */\n\nexports.IS_VALID_IDENTIFIER = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\n/**\n * Check if a variable name is valid.\n */\n\nfunction isValidVariableName(name) {\n  return typeof name === \"string\" && !RESERVED_WORDS.has(name) && exports.IS_VALID_IDENTIFIER.test(name);\n}\n\nexports.isValidVariableName = isValidVariableName;\n/**\n * Quote JavaScript key access.\n */\n\nfunction quoteKey(key, next) {\n  return isValidVariableName(key) ? key : next(key);\n}\n\nexports.quoteKey = quoteKey;\n/**\n * Serialize the path to a string.\n */\n\nfunction stringifyPath(path, next) {\n  var result = \"\";\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (isValidVariableName(key)) {\n        result += \".\".concat(key);\n      } else {\n        result += \"[\".concat(next(key), \"]\");\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n}\n\nexports.stringifyPath = stringifyPath;","map":null,"metadata":{},"sourceType":"script"}