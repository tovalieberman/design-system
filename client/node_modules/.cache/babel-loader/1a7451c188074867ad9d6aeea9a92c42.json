{"ast":null,"code":"import \"core-js/modules/es.string.small\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Styled from 'rsg-components/Styled';\nimport cx from 'clsx';\nexport var styles = function styles(_ref) {\n  var space = _ref.space,\n      color = _ref.color;\n  return {\n    button: {\n      padding: 2,\n      // Increase clickable area a bit\n      color: color.light,\n      background: 'transparent',\n      transition: 'color 750ms ease-out',\n      cursor: 'pointer',\n      '&:hover, &:focus': {\n        isolate: false,\n        color: color.linkHover,\n        transition: 'color 150ms ease-in'\n      },\n      '&:focus': {\n        isolate: false,\n        outline: [[1, 'dotted', color.linkHover]]\n      },\n      '& + &': {\n        isolate: false,\n        marginLeft: space[1]\n      },\n      // Style react-icons icon passed as children\n      '& svg': {\n        width: space[3],\n        height: space[3],\n        color: 'currentColor',\n        cursor: 'inherit'\n      }\n    },\n    isSmall: {\n      '& svg': {\n        width: 14,\n        height: 14\n      }\n    }\n  };\n};\nexport function ToolbarButtonRenderer(_ref2) {\n  var _cx;\n\n  var classes = _ref2.classes,\n      className = _ref2.className,\n      onClick = _ref2.onClick,\n      href = _ref2.href,\n      title = _ref2.title,\n      small = _ref2.small,\n      testId = _ref2.testId,\n      children = _ref2.children;\n  var classNames = cx(classes.button, className, (_cx = {}, _cx[classes.isSmall] = small, _cx));\n\n  if (href !== undefined) {\n    return React.createElement(\"a\", {\n      href: href,\n      title: title,\n      className: classNames,\n      \"aria-label\": title,\n      \"data-testid\": testId\n    }, children);\n  }\n\n  return React.createElement(\"button\", {\n    type: \"button\",\n    onClick: onClick,\n    title: title,\n    className: classNames,\n    \"aria-label\": title\n  }, children);\n}\nToolbarButtonRenderer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  href: PropTypes.string,\n  onClick: PropTypes.func,\n  title: PropTypes.string,\n  small: PropTypes.bool,\n  testId: PropTypes.string,\n  children: PropTypes.node\n};\nexport default Styled(styles)(ToolbarButtonRenderer);","map":null,"metadata":{},"sourceType":"module"}