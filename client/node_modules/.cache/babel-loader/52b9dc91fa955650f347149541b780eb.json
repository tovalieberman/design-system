{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar quote_1 = require(\"./quote\");\n\nvar function_1 = require(\"./function\");\n\nvar array_1 = require(\"./array\");\n/**\n * Transform an object into a string.\n */\n\n\nexports.objectToString = function (value, space, next, key) {\n  if (typeof Buffer === \"function\" && Buffer.isBuffer(value)) {\n    return \"new Buffer(\".concat(next(value.toString()), \")\");\n  } // Use the internal object string to select stringify method.\n\n\n  var toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\n/**\n * Stringify an object of keys and values.\n */\n\n\nvar rawObjectToString = function rawObjectToString(obj, indent, next) {\n  var eol = indent ? \"\\n\" : \"\";\n  var space = indent ? \" \" : \"\"; // Iterate over object keys and concat string together.\n\n  var values = Object.keys(obj).reduce(function (values, key) {\n    var fn = obj[key];\n    var result = next(fn, key); // Omit `undefined` object entries.\n\n    if (result === undefined) return values; // String format the value data.\n\n    var value = result.split(\"\\n\").join(\"\\n\".concat(indent)); // Skip `key` prefix for function parser.\n\n    if (function_1.USED_METHOD_KEY.has(fn)) {\n      values.push(\"\".concat(indent).concat(value));\n      return values;\n    }\n\n    values.push(\"\".concat(indent).concat(quote_1.quoteKey(key, next), \":\").concat(space).concat(value));\n    return values;\n  }, []).join(\",\".concat(eol)); // Avoid new lines in an empty object.\n\n  if (values === \"\") return \"{}\";\n  return \"{\".concat(eol).concat(values).concat(eol, \"}\");\n};\n/**\n * Stringify global variable access.\n */\n\n\nvar globalToString = function globalToString(value, space, next) {\n  return \"Function(\".concat(next(\"return this\"), \")()\");\n};\n/**\n * Convert JavaScript objects into strings.\n */\n\n\nvar OBJECT_TYPES = {\n  \"[object Array]\": array_1.arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": function objectError(error, space, next) {\n    return \"new Error(\".concat(next(error.message), \")\");\n  },\n  \"[object Date]\": function objectDate(date) {\n    return \"new Date(\".concat(date.getTime(), \")\");\n  },\n  \"[object String]\": function objectString(str, space, next) {\n    return \"new String(\".concat(next(str.toString()), \")\");\n  },\n  \"[object Number]\": function objectNumber(num) {\n    return \"new Number(\".concat(num, \")\");\n  },\n  \"[object Boolean]\": function objectBoolean(bool) {\n    return \"new Boolean(\".concat(bool, \")\");\n  },\n  \"[object Set]\": function objectSet(set, space, next) {\n    return \"new Set(\".concat(next(Array.from(set)), \")\");\n  },\n  \"[object Map]\": function objectMap(map, space, next) {\n    return \"new Map(\".concat(next(Array.from(map)), \")\");\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString\n};","map":null,"metadata":{},"sourceType":"script"}