{"ast":null,"code":"import \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport isFinite from 'lodash/isFinite';\nimport filterComponentExamples from './filterComponentExamples';\nimport filterComponentsInSectionsByExactName from './filterComponentsInSectionsByExactName';\nimport filterSectionExamples from './filterSectionExamples';\nimport findSection from './findSection';\nimport getInfoFromHash from './getInfoFromHash';\nimport { DisplayModes } from '../consts';\n/**\n * Return sections / components / examples to show on a screen according to a current route.\n *\n * Default: show all sections and components.\n * #!/Button: show only Button section or Button component\n * #!/Button/1: show only the second example (index 1) of Button component\n *\n * @param {object} sections\n * @param {string} hash\n * @param {boolean} pagePerSection\n * @returns {object}\n */\n\nexport default function getRouteData(sections, hash, pagePerSection) {\n  // Parse URL hash to check if the components list must be filtered\n  var infoFromHash = getInfoFromHash(hash, pagePerSection); // Name of the filtered component/section to show isolated (/#!/Button â†’ Button)\n\n  var targetName = infoFromHash.targetName,\n      hashArray = infoFromHash.hashArray;\n  var targetIndex = infoFromHash.targetIndex,\n      isolate = infoFromHash.isolate;\n  var displayMode = isolate ? DisplayModes.example : DisplayModes.all;\n\n  if (pagePerSection && !targetName && sections[0]) {\n    // For default takes the first section when pagePerSection enabled\n    targetName = sections[0].name;\n    hashArray = [targetName];\n  }\n\n  if (targetName) {\n    var filteredSections;\n\n    if (pagePerSection) {\n      // hashArray could be an array as [\"Documentation\", \"Files\", \"Button\"]\n      // each hashArray's element represent each section name with the same deep\n      // so it should be filter each section to trying to find each one of array on the same deep\n      hashArray.forEach(function (hashName, index) {\n        // Filter the requested component if required but only on the first depth\n        // so in the next time of iteration, it will be trying to filter only on the second depth and so on\n        filteredSections = filterComponentsInSectionsByExactName(sections, hashName, isolate); // If filteredSections exists, its because is an array of an component\n        // else it is an array of sections and depending his sectionDepth\n        // his children could be filtered or not\n\n        if (filteredSections.length) {\n          sections = filteredSections;\n        } else {\n          var section = findSection(sections, hashName);\n\n          if (section) {\n            // Only if hashName is the last of hashArray his children should be filtered\n            // because else there are possibilities to keep on filtering to try find the next section\n            var isLastHashName = !hashArray[index + 1]; // When sectionDepth is bigger than 0, their children should be filtered\n\n            var shouldFilterTheirChildren = section.sectionDepth > 0 && isLastHashName;\n\n            if (shouldFilterTheirChildren) {\n              // Filter his sections and components\n              section = Object.assign({}, section, {\n                sections: [],\n                components: []\n              });\n            }\n\n            sections = [section];\n          } else {\n            sections = [];\n          }\n        }\n      });\n\n      if (!sections.length) {\n        displayMode = DisplayModes.notFound;\n      } // The targetName takes the last of hashArray\n\n\n      targetName = hashArray[hashArray.length - 1];\n    } else {\n      // Filter the requested component if required\n      filteredSections = filterComponentsInSectionsByExactName(sections, targetName, true);\n\n      if (filteredSections.length) {\n        sections = filteredSections;\n        displayMode = DisplayModes.component;\n      } else {\n        var section = findSection(sections, targetName);\n        sections = section ? [section] : [];\n        displayMode = DisplayModes.section;\n      }\n    } // If a single component or section is filtered and a fenced block index is specified hide all other examples\n\n\n    if (isFinite(targetIndex)) {\n      if (filteredSections.length === 1) {\n        var filteredComponents = filteredSections[0].components;\n        sections = [Object.assign({}, filteredSections[0], {\n          components: [filterComponentExamples(filteredComponents[0], targetIndex)]\n        })];\n        displayMode = DisplayModes.example;\n      } else if (sections.length === 1) {\n        sections = [filterSectionExamples(sections[0], targetIndex)];\n        displayMode = DisplayModes.example;\n      }\n    }\n  }\n\n  return {\n    sections: sections,\n    displayMode: displayMode\n  };\n}","map":null,"metadata":{},"sourceType":"module"}