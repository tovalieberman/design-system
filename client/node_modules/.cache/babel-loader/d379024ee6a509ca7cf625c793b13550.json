{"ast":null,"code":"// Generated by CoffeeScript 1.6.3\nvar classic,\n    __slice = [].slice;\nmodule.exports = classic = {};\n\nclassic.implement = function () {\n  var classProto, classReference, desc, member, mixin, mixins, _i, _j, _len;\n\n  mixins = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), classReference = arguments[_i++];\n\n  for (_j = 0, _len = mixins.length; _j < _len; _j++) {\n    mixin = mixins[_j];\n    classProto = classReference.prototype;\n\n    for (member in mixin.prototype) {\n      if (!Object.getOwnPropertyDescriptor(classProto, member)) {\n        desc = Object.getOwnPropertyDescriptor(mixin.prototype, member);\n        Object.defineProperty(classProto, member, desc);\n      }\n    }\n  }\n\n  return classReference;\n};\n\nclassic.mix = function () {\n  var classProto, classReference, desc, member, mixin, mixins, _i, _j, _len;\n\n  mixins = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), classReference = arguments[_i++];\n  classProto = classReference.prototype;\n  classReference.__mixinCloners = [];\n\n  classReference.__applyClonersFor = function (instance, args) {\n    var cloner, _j, _len, _ref;\n\n    if (args == null) {\n      args = null;\n    }\n\n    _ref = classReference.__mixinCloners;\n\n    for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n      cloner = _ref[_j];\n      cloner.apply(instance, args);\n    }\n  };\n\n  classReference.__mixinInitializers = [];\n\n  classReference.__initMixinsFor = function (instance, args) {\n    var initializer, _j, _len, _ref;\n\n    if (args == null) {\n      args = null;\n    }\n\n    _ref = classReference.__mixinInitializers;\n\n    for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n      initializer = _ref[_j];\n      initializer.apply(instance, args);\n    }\n  };\n\n  classReference.__mixinQuitters = [];\n\n  classReference.__applyQuittersFor = function (instance, args) {\n    var quitter, _j, _len, _ref;\n\n    if (args == null) {\n      args = null;\n    }\n\n    _ref = classReference.__mixinQuitters;\n\n    for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n      quitter = _ref[_j];\n      quitter.apply(instance, args);\n    }\n  };\n\n  for (_j = 0, _len = mixins.length; _j < _len; _j++) {\n    mixin = mixins[_j];\n\n    if (!(mixin.constructor instanceof Function)) {\n      throw Error(\"Mixin should be a function\");\n    }\n\n    for (member in mixin.prototype) {\n      if (member.substr(0, 11) === '__initMixin') {\n        classReference.__mixinInitializers.push(mixin.prototype[member]);\n\n        continue;\n      } else if (member.substr(0, 11) === '__clonerFor') {\n        classReference.__mixinCloners.push(mixin.prototype[member]);\n\n        continue;\n      } else if (member.substr(0, 12) === '__quitterFor') {\n        classReference.__mixinQuitters.push(mixin.prototype[member]);\n\n        continue;\n      }\n\n      if (!Object.getOwnPropertyDescriptor(classProto, member)) {\n        desc = Object.getOwnPropertyDescriptor(mixin.prototype, member);\n        Object.defineProperty(classProto, member, desc);\n      }\n    }\n  }\n\n  return classReference;\n};","map":null,"metadata":{},"sourceType":"script"}