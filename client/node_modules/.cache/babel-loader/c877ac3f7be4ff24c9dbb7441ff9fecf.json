{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar AnsiPainter, Layout, RenderKid, Styles, blockStyleApplier, inlineStyleApplier, object, stripAnsi, terminalWidth, tools;\ninlineStyleApplier = require('./renderKid/styleApplier/inline');\nblockStyleApplier = require('./renderKid/styleApplier/block');\nAnsiPainter = require('./AnsiPainter');\nStyles = require('./renderKid/Styles');\nLayout = require('./Layout');\ntools = require('./tools');\nobject = require('utila').object;\nstripAnsi = require('strip-ansi');\nterminalWidth = require('./tools').getCols();\n\nmodule.exports = RenderKid = function () {\n  var self;\n  self = RenderKid;\n  RenderKid.AnsiPainter = AnsiPainter;\n  RenderKid.Layout = Layout;\n  RenderKid.quote = tools.quote;\n  RenderKid.tools = tools;\n  RenderKid._defaultConfig = {\n    layout: {\n      terminalWidth: terminalWidth\n    }\n  };\n\n  function RenderKid(config) {\n    if (config == null) {\n      config = {};\n    }\n\n    this.tools = self.tools;\n    this._config = object.append(self._defaultConfig, config);\n\n    this._initStyles();\n  }\n\n  RenderKid.prototype._initStyles = function () {\n    return this._styles = new Styles();\n  };\n\n  RenderKid.prototype.style = function () {\n    return this._styles.setRule.apply(this._styles, arguments);\n  };\n\n  RenderKid.prototype._getStyleFor = function (el) {\n    return this._styles.getStyleFor(el);\n  };\n\n  RenderKid.prototype.render = function (input, withColors) {\n    if (withColors == null) {\n      withColors = true;\n    }\n\n    return this._paint(this._renderDom(this._toDom(input)), withColors);\n  };\n\n  RenderKid.prototype._toDom = function (input) {\n    if (typeof input === 'string') {\n      return this._parse(input);\n    } else if (object.isBareObject(input) || Array.isArray(input)) {\n      return this._objToDom(input);\n    } else {\n      throw Error(\"Invalid input type. Only strings, arrays and objects are accepted\");\n    }\n  };\n\n  RenderKid.prototype._objToDom = function (o, injectFakeRoot) {\n    if (injectFakeRoot == null) {\n      injectFakeRoot = true;\n    }\n\n    if (injectFakeRoot) {\n      o = {\n        body: o\n      };\n    }\n\n    return tools.objectToDom(o);\n  };\n\n  RenderKid.prototype._paint = function (text, withColors) {\n    var painted;\n    painted = AnsiPainter.paint(text);\n\n    if (withColors) {\n      return painted;\n    } else {\n      return stripAnsi(painted);\n    }\n  };\n\n  RenderKid.prototype._parse = function (string, injectFakeRoot) {\n    if (injectFakeRoot == null) {\n      injectFakeRoot = true;\n    }\n\n    if (injectFakeRoot) {\n      string = '<body>' + string + '</body>';\n    }\n\n    return tools.stringToDom(string);\n  };\n\n  RenderKid.prototype._renderDom = function (dom) {\n    var bodyTag, layout, rootBlock;\n    bodyTag = dom[0];\n    layout = new Layout(this._config.layout);\n    rootBlock = layout.getRootBlock();\n\n    this._renderBlockNode(bodyTag, null, rootBlock);\n\n    return layout.get();\n  };\n\n  RenderKid.prototype._renderChildrenOf = function (parentNode, parentBlock) {\n    var i, len, node, nodes;\n    nodes = parentNode.children;\n\n    for (i = 0, len = nodes.length; i < len; i++) {\n      node = nodes[i];\n\n      this._renderNode(node, parentNode, parentBlock);\n    }\n  };\n\n  RenderKid.prototype._renderNode = function (node, parentNode, parentBlock) {\n    if (node.type === 'text') {\n      this._renderText(node, parentNode, parentBlock);\n    } else if (node.name === 'br') {\n      this._renderBr(node, parentNode, parentBlock);\n    } else if (this._isBlock(node)) {\n      this._renderBlockNode(node, parentNode, parentBlock);\n    } else if (this._isNone(node)) {\n      return;\n    } else {\n      this._renderInlineNode(node, parentNode, parentBlock);\n    }\n  };\n\n  RenderKid.prototype._renderText = function (node, parentNode, parentBlock) {\n    var ref, text;\n    text = node.data;\n    text = text.replace(/\\s+/g, ' ');\n\n    if ((parentNode != null ? (ref = parentNode.styles) != null ? ref.display : void 0 : void 0) !== 'inline') {\n      text = text.trim();\n    }\n\n    if (text.length === 0) {\n      return;\n    }\n\n    text = text.replace(/&nl;/g, \"\\n\");\n    return parentBlock.write(text);\n  };\n\n  RenderKid.prototype._renderBlockNode = function (node, parentNode, parentBlock) {\n    var after, before, block, blockConfig, ref;\n    ref = blockStyleApplier.applyTo(node, this._getStyleFor(node)), before = ref.before, after = ref.after, blockConfig = ref.blockConfig;\n    block = parentBlock.openBlock(blockConfig);\n\n    if (before !== '') {\n      block.write(before);\n    }\n\n    this._renderChildrenOf(node, block);\n\n    if (after !== '') {\n      block.write(after);\n    }\n\n    return block.close();\n  };\n\n  RenderKid.prototype._renderInlineNode = function (node, parentNode, parentBlock) {\n    var after, before, ref;\n    ref = inlineStyleApplier.applyTo(node, this._getStyleFor(node)), before = ref.before, after = ref.after;\n\n    if (before !== '') {\n      parentBlock.write(before);\n    }\n\n    this._renderChildrenOf(node, parentBlock);\n\n    if (after !== '') {\n      return parentBlock.write(after);\n    }\n  };\n\n  RenderKid.prototype._renderBr = function (node, parentNode, parentBlock) {\n    return parentBlock.write(\"\\n\");\n  };\n\n  RenderKid.prototype._isBlock = function (node) {\n    return !(node.type === 'text' || node.name === 'br' || this._getStyleFor(node).display !== 'block');\n  };\n\n  RenderKid.prototype._isNone = function (node) {\n    return !(node.type === 'text' || node.name === 'br' || this._getStyleFor(node).display !== 'none');\n  };\n\n  return RenderKid;\n}();","map":null,"metadata":{},"sourceType":"script"}