{"ast":null,"code":"'use strict';\n\nfunction Sorter() {}\n\nSorter.prototype.sort = function (tokens, fromIndex) {\n  fromIndex = fromIndex || 0;\n\n  for (var i = 0, len = this.keys.length; i < len; i++) {\n    var key = this.keys[i];\n    var token = key.slice(1);\n    var index = tokens.indexOf(token, fromIndex);\n\n    if (index !== -1) {\n      do {\n        if (index !== fromIndex) {\n          tokens.splice(index, 1);\n          tokens.splice(fromIndex, 0, token);\n        }\n\n        fromIndex++;\n      } while ((index = tokens.indexOf(token, fromIndex)) !== -1);\n\n      return this[key].sort(tokens, fromIndex);\n    }\n  }\n\n  return tokens;\n};\n\nfunction TokenChain() {}\n\nTokenChain.prototype = {\n  add: function add(tokens) {\n    var self = this;\n    tokens.forEach(function (token) {\n      var key = '$' + token;\n\n      if (!self[key]) {\n        self[key] = [];\n        self[key].processed = 0;\n      }\n\n      self[key].push(tokens);\n    });\n  },\n  createSorter: function createSorter() {\n    var self = this;\n    var sorter = new Sorter();\n    sorter.keys = Object.keys(self).sort(function (j, k) {\n      var m = self[j].length;\n      var n = self[k].length;\n      return m < n ? 1 : m > n ? -1 : j < k ? -1 : j > k ? 1 : 0;\n    }).filter(function (key) {\n      if (self[key].processed < self[key].length) {\n        var token = key.slice(1);\n        var chain = new TokenChain();\n        self[key].forEach(function (tokens) {\n          var index;\n\n          while ((index = tokens.indexOf(token)) !== -1) {\n            tokens.splice(index, 1);\n          }\n\n          tokens.forEach(function (token) {\n            self['$' + token].processed++;\n          });\n          chain.add(tokens.slice(0));\n        });\n        sorter[key] = chain.createSorter();\n        return true;\n      }\n\n      return false;\n    });\n    return sorter;\n  }\n};\nmodule.exports = TokenChain;","map":null,"metadata":{},"sourceType":"script"}