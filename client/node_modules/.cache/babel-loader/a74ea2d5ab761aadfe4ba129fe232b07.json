{"ast":null,"code":"// Generated by CoffeeScript 1.9.3\nvar SpecialString, fn, i, len, prop, ref;\n\nmodule.exports = SpecialString = function () {\n  var self;\n  self = SpecialString;\n  SpecialString._tabRx = /^\\t/;\n  SpecialString._tagRx = /^<[^>]+>/;\n  SpecialString._quotedHtmlRx = /^&(gt|lt|quot|amp|apos|sp);/;\n\n  function SpecialString(str) {\n    if (!(this instanceof self)) {\n      return new self(str);\n    }\n\n    this._str = String(str);\n    this._len = 0;\n  }\n\n  SpecialString.prototype._getStr = function () {\n    return this._str;\n  };\n\n  SpecialString.prototype.set = function (str) {\n    this._str = String(str);\n    return this;\n  };\n\n  SpecialString.prototype.clone = function () {\n    return new SpecialString(this._str);\n  };\n\n  SpecialString.prototype.isEmpty = function () {\n    return this._str === '';\n  };\n\n  SpecialString.prototype.isOnlySpecialChars = function () {\n    return !this.isEmpty() && this.length === 0;\n  };\n\n  SpecialString.prototype._reset = function () {\n    return this._len = 0;\n  };\n\n  SpecialString.prototype.splitIn = function (limit, trimLeftEachLine) {\n    var buffer, bufferLength, justSkippedSkipChar, lines;\n\n    if (trimLeftEachLine == null) {\n      trimLeftEachLine = false;\n    }\n\n    buffer = '';\n    bufferLength = 0;\n    lines = [];\n    justSkippedSkipChar = false;\n\n    self._countChars(this._str, function (char, charLength) {\n      if (bufferLength > limit || bufferLength + charLength > limit) {\n        lines.push(buffer);\n        buffer = '';\n        bufferLength = 0;\n      }\n\n      if (bufferLength === 0 && char === ' ' && !justSkippedSkipChar && trimLeftEachLine) {\n        return justSkippedSkipChar = true;\n      } else {\n        buffer += char;\n        bufferLength += charLength;\n        return justSkippedSkipChar = false;\n      }\n    });\n\n    if (buffer.length > 0) {\n      lines.push(buffer);\n    }\n\n    return lines;\n  };\n\n  SpecialString.prototype.trim = function () {\n    return new SpecialString(this.str.trim());\n  };\n\n  SpecialString.prototype.trimLeft = function () {\n    return new SpecialString(this.str.replace(/^\\s+/, ''));\n  };\n\n  SpecialString.prototype.trimRight = function () {\n    return new SpecialString(this.str.replace(/\\s+$/, ''));\n  };\n\n  SpecialString.prototype._getLength = function () {\n    var sum;\n    sum = 0;\n\n    self._countChars(this._str, function (char, charLength) {\n      sum += charLength;\n    });\n\n    return sum;\n  };\n\n  SpecialString.prototype.cut = function (from, to, trimLeft) {\n    var after, before, cur, cut;\n\n    if (trimLeft == null) {\n      trimLeft = false;\n    }\n\n    if (to == null) {\n      to = this.length;\n    }\n\n    from = parseInt(from);\n\n    if (from >= to) {\n      throw Error(\"`from` shouldn't be larger than `to`\");\n    }\n\n    before = '';\n    after = '';\n    cut = '';\n    cur = 0;\n\n    self._countChars(this._str, function (_this) {\n      return function (char, charLength) {\n        if (_this.str === 'ab<tag>') {\n          console.log(charLength, char);\n        }\n\n        if (cur === from && char.match(/^\\s+$/) && trimLeft) {\n          return;\n        }\n\n        if (cur < from) {\n          before += char;\n        } else if (cur < to || cur + charLength <= to) {\n          cut += char;\n        } else {\n          after += char;\n        }\n\n        cur += charLength;\n      };\n    }(this));\n\n    this._str = before + after;\n\n    this._reset();\n\n    return SpecialString(cut);\n  };\n\n  SpecialString._countChars = function (text, cb) {\n    var char, charLength, m;\n\n    while (text.length !== 0) {\n      if (m = text.match(self._tagRx)) {\n        char = m[0];\n        charLength = 0;\n        text = text.substr(char.length, text.length);\n      } else if (m = text.match(self._quotedHtmlRx)) {\n        char = m[0];\n        charLength = 1;\n        text = text.substr(char.length, text.length);\n      } else if (text.match(self._tabRx)) {\n        char = \"\\t\";\n        charLength = 8;\n        text = text.substr(1, text.length);\n      } else {\n        char = text[0];\n        charLength = 1;\n        text = text.substr(1, text.length);\n      }\n\n      cb.call(null, char, charLength);\n    }\n  };\n\n  return SpecialString;\n}();\n\nref = ['str', 'length'];\n\nfn = function fn() {\n  var methodName;\n  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length);\n  return SpecialString.prototype.__defineGetter__(prop, function () {\n    return this[methodName]();\n  });\n};\n\nfor (i = 0, len = ref.length; i < len; i++) {\n  prop = ref[i];\n  fn();\n}","map":null,"metadata":{},"sourceType":"script"}